<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>PONG GAME</title>
    </head>
    <body>
        <div id = "pong-id" data-pong-id= "1"> </div>
        <canvas id="pong" width="600" height="400"> error canvas isn't work </canvas>
<script> 

const canvas = document.getElementById("pong");
const context = canvas.getContext("2d");
const element = document.getElementById("pong-id");
pong_id = element.getAttribute("data-pong-id");
canvas.addEventListener("mousemove", movePaddle);

// part 1 functions draw
// draw score
function drawScore(x, y,score ,color){
    context.fillStyle = color;
    context.font = "35px fantasy"; // pas responsive
    context.beginPath();
    context.fillText(score, x, y);
    context.closePath();
}

//draw the line at the middle
function drawMiddleLine(line){
    for(let i =  0; i <= canvas.height; i += 13){  // pas responsive
        drawRect(line.x, line.y + i, line.width, line.height, line.color);
    }
}

// draw rect
function drawRect(x,y,w,h,color){
    context.fillStyle = color;
    context.beginPath();
    context.fillRect(x,y,w,h);
    context.closePath();
}

// draw ball
function drawBall(x,y,r,color){
    context.fillStyle = color;
    context.beginPath(); //each call permite to clean the last arc
    context.arc(x,y,r,0, Math.PI*2, false);
    context.closePath();
    context.fill();
}

//part 2 users padlle
//User1
const user1 = { 
    //position
    x : 0, 
    y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive
    //form 
    width : 10, // pas responsive
    height : 100, // pas responsive
    color : "GREY",
    score : 0
}
//User2
const user2 = {
    //position
    x : canvas.width - 10, // pas responsive il s'agit de largeur (10px)
    y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive correspond au paddle
    //form
    width : 10, // pas responsive
    height : 100, // pas responsive
    color : "GREY",
    score : 0
}
// Part 3 the ball
const ball =  {
    //position
    x : canvas.width/2,
    y : canvas.height/2, // for be at the center
    //form
    radius : 10, // pas responsive
    color : "RED",
    //deplacement
    velocityX : 5,
    velocityY : 5,
    speed : 5 // a voir si pas assez rapide ou trop

}
//part 4 show 

const line = {
    //pos
    x : canvas.width / 2 - 1, 
    y : 0,
    //form
    width : 2, 
    height : 10,
    color : "WHITE"
}

function show(){ // create a new map the order is important
// const part
drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
drawMiddleLine(line);
drawScore(canvas.width/4, canvas.height/5, user1.score, "WHITE");
drawScore(3 * canvas.width/4, canvas.height/5, user2.score, "WHITE");
// move part
drawRect(user1.x, user1.y, user1.width, user1.height, user1.color);
drawRect(user2.x, user2.y, user2.width, user2.height, user2.color);
drawBall(ball.x, ball.y, ball.radius, ball.color);
}




function movePaddle(event){ // function to permite to change the direction of the users paddle with the mouse
    //user1.y = event.clientY - canvas.getBoundingClientRect().top - user1.height/2;
    user2.y = event.clientY - canvas.getBoundingClientRect().top - user2.height/2; // pour tester a brancher avec backbone et actioncable     


}

function playing()
{
    ft_recieve()
    ft_send();
    show();
}


function ft_recieve()
{
socket.onmessage = function(event) {            
const response = event.data;
const msg = JSON.parse(response);    
        if (msg.message.data.usery)
            user1.y = msg.message.data.usery;
        if (msg.message.data.bally)
            ball.y = msg.message.data.bally;
        if (msg.message.data.ballx)
            ball.x = msg.message.data.ballx;
        if (msg.message.data.score_1)
            user1.score = msg.message.data.score_1;  
        if (msg.message.data.score_2)
            user2.score = msg.message.data.score_2;
        }
    };


function ft_send()
{
    socket.send(JSON.stringify({
            command: "message",
            identifier: JSON.stringify({
            channel: "PongChannel",
            pong_id: pong_id

            }),
            data: JSON.stringify({
                data: {user2y: user2.y}
            })
        }));
}



//main
socket = new WebSocket('<%= ENV["action_cable_url"] %>');

socket.onopen=  function()
{
    socket.send(JSON.stringify({
            command: "subscribe",
            identifier: JSON.stringify({
            channel: "PongChannel",
            pong_id: pong_id

            })
        }));
    console.log("subscribe ok");
} 



setInterval(playing, 1000/50);


</script>

    </body>
</html>