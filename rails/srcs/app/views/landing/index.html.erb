<%= stylesheet_link_tag "style-header.css" %>

<% if !current_user %>
	<%= render "pages/signin" %>
<% elsif current_user.sessions.last.need_two_factor_auth_validation == true %>
	<%= render "pages/two_factor_auth" %>
<% else %> 
	<% if current_user.current_status != "banned" %>
	<%= render "pages/navbar" %>

	<script>
		document.dispatchEvent(new CustomEvent("logged", {
			detail: {id: <%= current_user.id %>} //>#color patch
		}));
		document.addEventListener("start_game", function(event){
			console.log("start");
			console.log(event.detail);
			if (event.detail.data.content == "host_user")
			{
				refresh_live_match();
				console.log("++++++++++++++++++++++host+++++++++++++++++++++++")
				setTimeout(() => {
					playview.render(true);
					pongview.setElement("#pong-area").render();
				}, 4000);
			}
			else
			{
				console.log("--------------------guest------------------")
				var host_id = event.detail.data.host_id
					setTimeout(() => {
				playview.render(true);
				pongguest.setElement("#pong-area").render(host_id);
				}, 5000, host_id);
			}
		});
		document.addEventListener("notif", function(event){
			if (event.detail.data.sender)
			{
				if ($("#main_chat_in").val() == event.detail.data.sender.id)
					msgview.setElement("#conversation_window").render(event.detail.data.sender);
				if ($("#admin_chat_view_in").val() == event.detail.data.sender.id)
					chatview.render_admin_chat_view(event.detail.data.sender);
			}
			if (event.detail.data.kicked_from)
			{
				var val_hidden = $("#chat_hidden_id").val();
				var kicked_from = event.detail.data.kicked_from;
				if (val_hidden == "chat_" + kicked_from.id || val_hidden == "param_" + kicked_from.id || val_hidden == "detail_" + kicked_from.id)
					chatview.setElement("#chat_area").render_chat_main();
			}
			if (event.detail.data.refresh)
			{
				var val_hidden = $("#chat_hidden_id").val();
				var data = event.detail.data.refresh;
				if (val_hidden == "detail_" + data.id)
					chatview.setElement("#chat_area").render_chat_details(data);
				if (val_hidden == "admin_detail_" + data.id)
					chatview.setElement("#chat_area").render_admin_chat_details(data);
			}
			if (event.detail.data.channel_destroyed)
			{
				var data = event.detail.data.channel_destroyed;
				var val_hidden = $("#chat_hidden_id").val();
				if (val_hidden == "admin_chat_" + data)
					chatview.setElement("#chat_area").render_admin_chat_view();
				if (val_hidden == "admin_detail_" + data)
					chatview.setElement("#chat_area").render_admin_chat_view();
			}
			if (event.detail.data.refresh_tournament_details_id)
			{
				var tournament_id = event.detail.data.refresh_tournament_details_id;
				var val_hidden = $("#tournament_details_hidden_id").val();
				console.log("tournament_id" + tournament_id);
				console.log("val" + val_hidden);
				if (val_hidden == "tournament_details_" + tournament_id)
				{
					tournamentview.render_details(tournament_id);
				}
			}
		});
		// set the socket for having notification 
		socket_notif = new WebSocket('<%= ENV["action_cable_url"] %>'); 
		socket_notif.onopen=  function()
		{
			socket_notif.send(JSON.stringify({
				command: "subscribe",
				identifier: JSON.stringify({
					channel: "PongnotChannel",
					pong_id: 0
				})
			}));
		};
		function refresh_live_match()
		{
			socket_notif.send(JSON.stringify({
				command: "message",
				identifier: JSON.stringify({
				channel: "PongnotChannel",
				pong_id: 0
				}),
				data: JSON.stringify({
					data: {
						play: "true"
					}
				})
			}));
		}
		window.onbeforeunload = function() {
    	socket.onclose = function () {socket_notif.close();
    	console.log("socket pongnotchannel close")};
		};
		<% if(current_user.is_owner || current_user.is_admin) %>
			$("#navbar-id").append("<li class='nav-item'><a id='nav_to_admin' class='nav-link'>ADMIN</a></li>");
		<% end %>

	</script>

	<div class="container-fluide body-page" id="inside-page">
		<%= render "pages/log" %>
		<%= render "pages/live" %>
		<%= render "pages/play" %>
		<%= render "pages/guild" %>
		<%= render "pages/option" %>
		<%= render "pages/admin" %>
		<%= render "pages/profile" %>
		<%= render "pages/tournament" %>
		<%= render "pages/war" %>
		<%= render "pages/all_guild" %>
		<%= render "pages/chat/param" %>
		<%= render "pages/chat/create" %>
		<%= render "pages/chat/main" %>	
		<%= render "pages/chat/msg" %>	
		<%= render "pages/pongHost" %>
		<%= render "pages/pongGuest"%>
		<%= render "pages/pongWatch"%>		
		<%= render "pages/guild_history" %>
		<%= render "pages/chat/details" %>
		<%= render "pages/war_info" %>
		<%= render "pages/ladder" %>
		<%= render "pages/chat/admin_chat_view" %>
		<%= render "pages/guild_users" %>
		<%= render "pages/tournament_details" %>
	</div>

<script>

//****************************** GLOBAL ***************************
var current_user_id = <%= current_user.id %>; // >
var current_session_id = <%= current_user.sessions.last.id %>; // >

// ******************************************** MODELS/COLLECTIONS ********************************************
//_____________________________________ User _____________________________________
var User = Backbone.Model.extend({
	urlRoot: "/users.json",

	defaults: {
		name: '',
		avatar: '',
		current_status: 'Online',
		points: 42,
		is_admin: true
	},

	initialize : function() {
		console.log("UserModel created");
	  },
});

var Users = Backbone.Collection.extend({
	modele: User,
	url: "/users.json",

	initialize : function() {
		console.log("UserCollection created");
	}
});

var usercollection = new Users();

async function set_status() {
	var data = {
		current_status: "logged in",	
	}
	Backbone.ajax({
        url: '/users/' + current_user_id,
        data: JSON.stringify(data),
        type: 'put',
        dataType: 'json',
        contentType: 'application/json',
        success: function(response) {
        },
        error: function(){
			Swal.fire("", "error", "error");
        }
      });
};

set_status();

//_____________________________________ Guild _____________________________________
var Guild = Backbone.Model.extend({
	urlRoot: "/guilds.json",

	defaults:{
		name: "No guild",
		points:"0",
	}
});

var Guilds = Backbone.Collection.extend({
	model: Guild,
	url: "/guilds.json",

	initialize : function() {
		console.log("UserCollection created");
	}
});

var GuildParticipation = Backbone.Model.extend({
	urlRoot: "/guild_participations",
});

var guildcollection = new Guilds();

//_____________________________________ Friendship _____________________________________

var Friendship = Backbone.Model.extend({
	urlRoot: "/friendships.json",

});

var Friendships = Backbone.Collection.extend({
	model: Friendship,
	url: "/friendships.json",

	initialize : function() {
		console.log("Collection created");
	}
});

var friendshipcollection = new Friendships();

//____________________________________ War _____________________________________

var War = Backbone.Model.extend({
	urlRoot: "/wars.json",
});

var Wars = Backbone.Collection.extend({
	model: War,
	url: "/wars.json",
});

var Ask_for_war = Backbone.Model.extend({
	urlRoot: "/ask_for_wars.json",
});

var Ask_for_wars = Backbone.Collection.extend({
	model: Ask_for_war,
	url: "/ask_for_wars.json",
});


var WarParticipation = Backbone.Model.extend({
	urlRoot: "/war_participations.json",
});

var Game = Backbone.Model.extend({
	urlRoot: "/games.json",

});

//____________________________________ Game _____________________________________

var Games = Backbone.Collection.extend({
	model: Game,
	url: "/games.json",
});

var Ask_for_game = Backbone.Model.extend({
	urlRoot: "/ask_for_games",
});

var gamecollection = new Games();

//_____________________________________ Notification _____________________________________

var Notification = Backbone.Model.extend({
	urlRoot: "/notifications.json",

});

var Notifications = Backbone.Collection.extend({
	model: Notification,
	url: "/notifications.json",

	initialize : function() {
	}
});

var notificationcollection = new Notifications();

//_____________________________________ Player _____________________________________

var Player = Backbone.Model.extend({
	urlRoot: "/players",
})

var Players = Backbone.Collection.extend({
	model: Player,
	url: "/players.json",

	initialize : function() {
	}
});

var playercollection = new Players();

//******************************************** VIEWS ********************************************
//_____________________________________ LogView _____________________________________

var LogView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#log-template').html()),
	collection: usercollection,

	initialize : async function() {
		console.log("LogView created");
		this.listenTo(this.collection, 'add remove', this.render, this);
		this.collection.url = "/users.json";
	  	await this.collection.fetch({wait: true});
	},

	events: {
    	"click #add-user": "add",
    	"click #delete-user": "delete",
    	"click #logout ": "logout",
    	"click #user_status ": "status",
  	},

	render : async function() {
		
		await this.collection.fetch({wait: true});

		var user = new User({ id: current_user_id });
		user.urlRoot = "/users";
		await user.fetch();
		
	  	console.log("Render Log");
		this.$el.html(this.template({
			users: this.collection.toJSON(),
            user: user.toJSON()
		}));

	  	return this;

	},

	add: function() {
		console.log("Add user");
		var user = new User({name : 'hemil', autre:'tete'});
		this.collection.create(user);
		this.render();
	 },
	 
  	delete: function() {
		console.log("Delete user");
		var users = this.collection.toJSON();
		var user = users[users.length - 1];
		if (user){
			var to_delete = this.collection.get(user.id);
	  		this.collection.url = "/users"
			to_delete.destroy();
			this.render();
		}	
	 },
	  
	logout: function() { 
		var session_id = <%== current_user.sessions.last.id %>; // anti jaune >
		$.ajax({
			url: "/sessions/" + session_id,
			data: false,
			processData: false,
			contentType: false,
			type: 'DELETE',
			success: function(){
				console.log("DELETE sent !");
				window.location.href = '<%= ENV["site_url"] %>';
			}
		})
	},
	
	status: async function() { 
		
		usr = this.collection.toJSON(); 
		for (let i = 0; i < usr.length; i++)
		{
			console.log(usr[i].name, " : ", usr[i].current_status);
		}
	}

})

//_____________________________________ NotifView _____________________________________
var NotifView = Backbone.View.extend({
	el : '#notif_item',
	template: _.template($('#notif-template').html()),
	collection: notificationcollection,

	initialize : function() {
	},

	render : async function() {
		await this.collection.fetch();

		this.$el.html(this.template({notification: this.collection.toJSON()}));
		console.log("Render Notif");
		return this;
	},
})

//_____________________________________ ChatView _____________________________________
var ChatView = Backbone.View.extend({
	el: '#chat_area',
	template_chat_main: _.template($('#chat_main-template').html()),
	template_chat_param: _.template($('#chat_param-template').html()),
	template_chat_create: _.template($('#chat_create-template').html()),
	template_chat_details: _.template($('#chat_details-template').html()),
	template_admin_chat_view: _.template($('#chat_admin_view-template').html()),
	
	events: {
		"click #main_chat_to_param": "render_chat_param",
		"click #main_chat_to_create": "render_chat_create",
		"click #back_to_main_chat": "render_chat_main",
		"click #show_chat_details": "render_chat_details",
		"click #admin_to_chat_details": "render_admin_chat_details"
	},

	render_chat_param : function(e) {
		var channel_id = e;
		if (!(channel_id.id))
			channel_id = $(e.currentTarget).data('channel');
		else
			channel_id = channel_id["id"];
		var ChannelParticipation = Backbone.Model.extend({
			urlRoot: '/channel_participations'
		});
		var Channel = Backbone.Model.extend({
			urlRoot: '/channels'
		});
		var channel = new Channel({id: channel_id});
		var channel_participation = new ChannelParticipation();
		var el = this.$el;
		var t = this.template_chat_param;
		channel.fetch({
			success: function(data1){
				data1 = data1.toJSON();
				channel_participation.fetch({
					data: {user_id: <%== current_user.id %>, receiver_id: data1.id}, // anti jaune >
					success: function(data)
					{
						if (!data.toJSON().id)
							return;
						channel_participation = new ChannelParticipation();
						channel_participation.fetch({
							data:
							{
								type: (data1.scope == "direct" ? "facing_user" : ""),
								user_id: <%== current_user.id %>,// >
								receiver_id: data1.id
							},
							success: function(data2)
							{
								el.html(t({channel: data1, channel_participation: data.toJSON(), other_participation: data2.toJSON()}));
							}
						});
					}
				}); 
			}
		});
	},
	render_chat_create : function() {
		this.$el.html(this.template_chat_create);
	},
	render_chat_main : function(channel) {
		if (channel && channel.name)
		{
			if (channel.scope == "direct")
			{
				var el = this.$el;
				var temp = this.template_chat_main;
				var ChannelParticipation = Backbone.Model.extend({
					urlRoot: '/channel_participations'
				});
				var channel_participation = new ChannelParticipation();
				channel_participation.fetch(
				{
					data:
					{
						type: "direct",
						name: channel.name
					},
					success: function(data)
					{
						var i = 0;
						var target;
						data = data.toJSON();
						var size = Object.keys(data).length;
						while (i < size)
						{
							if (data[i].id != current_user_id)
							{
								target = data[i];
								break;
							}
							i++;
						}
						el.html(temp({receiver: channel, target: target}));
					}
				});
			}
			else
			{
				this.$el.html(this.template_chat_main({receiver: channel}));
			}
		}
		else
		{
			channel = {id : 0}
			this.$el.html(this.template_chat_main({receiver: channel}));
		}
		return this;
	},
	render_chat_details : function(e) {
		var channel_id = e;
		var l = this.$el;
		var t = this.template_chat_details;
		if (!(channel_id.id))
			channel_id = $(e.currentTarget).data('channel');
		else
			channel_id = channel_id["id"];
		var Channel = Backbone.Model.extend({
			urlRoot: '/channels'
		});
		var channel = new Channel({id: channel_id});
		channel.fetch({
			success: function(data){
				l.html(t({channel: data.toJSON(), as_admin: false}));
			}
		});
	},
	render_admin_chat_details : function(e) {
		var channel_id = e;
		var l = this.$el;
		var t = this.template_chat_details;
		if (!(channel_id.id))
			channel_id = $(e.currentTarget).data('channel');
		else
			channel_id = channel_id["id"];
		var Channel = Backbone.Model.extend({
			urlRoot: '/channels'
		});
		var channel = new Channel({id: channel_id});
		channel.fetch({
			success: function(data){
				l.html(t({channel: data.toJSON(), as_admin: true}));
			}
		});
	},
	render_admin_chat_view: function(channel){
		if (!channel || !channel.id)
			channel = {id: 0};
		this.$el.html(this.template_admin_chat_view({receiver: channel}));
	}
});

var chatview = new ChatView();

var MsgView = Backbone.View.extend({
	el: '#conversation_window',
	template: _.template($("#msg-template").html()),

	render: function(channel){
		console.log("-->");
		console.log(channel);
		if (channel && channel.name)
		{
			if (channel.scope == "direct")
			{
				var el = this.$el;
				var temp = this.template;
				var ChannelParticipation = Backbone.Model.extend({
					urlRoot: '/channel_participations'
				});
				var channel_participation = new ChannelParticipation();
				channel_participation.fetch(
				{
					data:
					{
						type: "direct",
						name: channel.name
					},
					success: function(data)
					{
						var i = 0;
						var target;
						data = data.toJSON();
						var size = Object.keys(data).length;
						while (i < size)
						{
							if (data[i].id != current_user_id)
							{
								target = data[i];
								break;
							}
							i++;
						}
						console.log(channel);
						console.log(target);
						el.html(temp({receiver: channel, target: target}));
					}
				});
			}
			else
			{
				this.$el.html(this.template({receiver: channel}));
			}
		}
		else
			this.$el.html(this.template({receiver: {id: 0}}));
	}
})

var msgview = new MsgView();

//_____________________________________ GuildView _____________________________________
var GuildView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#guild-template').html()),
	template_all_guild: _.template($('#all_guild-template').html()),
	template_guild_history: _.template($('#guild_history_template').html()),
	collection: guildcollection,

	initialize : function() {
		console.log("GuildView created");
	},
	events: {
		"click #all_guild_btn": "render_all_guild",
		"click #back_to_guild": "render",
		"click #leave_guild_btn": "delete",
		"click .name_score": "go_to_guild",
		"submit #create_guild": "add",
		"submit #join_a_guild": "join",
	},
	join: async function(evt) {
		evt.preventDefault();
		console.log("Join guild");

		var guild_name = $("#all_guild_dropdown option:selected").text();
		console.log("guild_name", guild_name)

		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();

		var user = new User();
		user.urlRoot = "/users/" + current_user_id 
		await user.fetch();
		user = user.toJSON();

		msg = user.name + " want to joing " + the_guild.name + "."
		notif = new Notification({
			from_user_id: current_user_id,
			user_id: the_guild.owner_id,
			table_type: "guild_create",
			table_id: the_guild.id,
			message: msg
		});
		await notif.save();
	},
	add: async function(evt) {
		evt.preventDefault();

		var guild = new Guild({
			name : $('#inputGuildName').val(),
			anagram: $('#inputGuildAnagram').val().toUpperCase(),
			owner_id : current_user_id,
			user_id: current_user_id,
		});
		var self = this;
		this.collection.create(guild, {
			success: function(response) {
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
				self.render();
			},
			error: function(model, response) {
				if (response.status == 422){
					Swal.fire("", response.responseJSON.msg, "error");
				}
				else{
					Swal.fire("", "error: " + response.status, "error");
				}
			},
			wait: true
		});
	},
	delete: async function() {
		var user = new User();
		user.urlRoot = "/users/" + current_user_id 
		await user.fetch();
		user = user.toJSON();

		guildparticip = new GuildParticipation({
			id: user.guild_participation_id,
		});
		var self = this;
		guildparticip.destroy({
			success: function(model, response) {
				self.render();
			},
			error: function(model, response) {
				if (response.status == 422){
					Swal.fire("", response.responseJSON.msg, "error");
				}
				else{
					Swal.fire("", "error: " + response.status, "error");
				}
			},
			wait: true
		});
	},
	render : async function() {
		await this.collection.fetch();// obligatoire ?

		var user = new User();
		user.urlRoot = "/users/" + current_user_id
		await user.fetch();
		user = user.toJSON();

		if (user.guild_participation_id != null){
			var guild_p = new GuildParticipation();
			guild_p.urlRoot = "/guild_participations/" + user.guild_participation_id
			await guild_p.fetch();
			guild_p = guild_p.toJSON();

			this.render_history(guild_p.guild_id, true);
		}
		else{	
			await this.collection.fetch();
			this.$el.html(this.template({
				guilds: this.collection.toJSON(),
			}));
		}
		return this;
	},
	render_history: async function(guild_id, is_current_user_guild)
	{
		//#Header
		var guild = new Guild();
		guild.urlRoot = "/guilds/" + guild_id 
		await guild.fetch();
		guild = guild.toJSON();

		var owner = new User();
		owner.urlRoot = "/users/" + guild.owner_id
		await owner.fetch();

		//#history
		var wars = new Wars();
		wars.url = "/wars.json/?guild_id=" + guild.id;
		await wars.fetch();

		console.log("war history: ", wars.toJSON());//#dell me

		this.$el.html(this.template_guild_history({  
			wars: wars.toJSON(),
			guilds: this.collection,
			guild: guild,
			owner: owner.toJSON(),
			is_current_user_guild,
		}));
		console.log(guild);
		guildusersview.setElement("#show_guild_users_id").render(guild.id, false);
	},
	render_all_guild : async function() {
		await this.collection.fetch();
		await usercollection.fetch(); //# good practice ?

		this.$el.html(this.template_all_guild({
			guilds: this.collection.toJSON(),
			usr: usercollection
		}));
		return this;
	}
})

//_____________________________________ PongWatch _____________________________________
var PongWatch = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($("#pongWatch-template").html()),
	
	render : function() {
		this.$el.html(this.template);
		return this;
	}
})

var pongWatch = new PongWatch();

var GuildUsersView = Backbone.View.extend({
	el: '#show_guild_users_id',
	template: _.template($("#guild_users-template").html()),

	render: function(guild_id, as_admin)
	{
		var l = this.$el;
		var t = this.template;
		var Guild = Backbone.Model.extend({
			urlRoot: '/guilds'
		});
		var guild = new Guild({id: guild_id});
		guild.fetch({
			success: function(data){
				l.html(t({guild: data.toJSON(), as_admin: as_admin}));
			},
			error: function(data){
				l.html(t({guild: {id: 0}, as_admin: as_admin}));
			}
		});
	}
});
var guildusersview = new GuildUsersView();

//_____________________________________ PongView _____________________________________
var PongView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($("#pongHost-template").html()),
	render : function() {
		this.$el.html(this.template);
		return this;
	}
});

var pongview = new PongView();

//_____________________________________ PongGuest _____________________________________
var PongGuest = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($("#pongGuest-template").html()),
	render : function(host_id) {
		this.$el.html(this.template({host_id: host_id}));
		return this;
	}
});

var pongguest = new PongGuest();

//_____________________________________ LiveView _____________________________________
var LiveView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#live-template').html()),

	initialize : function() {
		console.log("LiveView created");
	},


	render : function() {
		this.$el.html(this.template);
		chatview.setElement("#chat_area").render_chat_main(); // https://solvemprobler.com/blog/2013/04/07/backbone-tips-rendering-views-and-their-childviews/
		console.log("Render Live");
		refresh();
		return this;
	},
})

//_____________________________________ OptionView _____________________________________
var OptionView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#option-template').html()),
  
	initialize : function() {
		console.log("OptionView created");
	},
  
	events: {
		"submit #edit_profile_form": "update",
		"click #logout ": "logout",
	},

	logout: function() {
		console.log("LOG OUT") 
		var session_id = <%== current_user.sessions.last.id %>; // anti jaune >
		$.ajax({
			url: "/sessions/" + session_id,
			data: false,
			processData: false,
			contentType: false,
			type: 'DELETE',
			success: function(){
				console.log("DELETE sent !");
				window.location.href = '<%= ENV["site_url"] %>';
			}
		})
	},

	update : async function(e){
		e.preventDefault();
		var self = this;
		console.log("submit two_factor_auth_form");

		// affiche le spinner
		var spinner = document.getElementById("spinner");
		spinner.classList.add("active");

		// récupération des inputs
		let pseudo = $('#edit_profile_pseudo_input').val();
		let title_name = $("#title_drop_down option:selected").text();
		let fileInput = document.getElementById('edit_profile_avatar_input');
		let attachment = fileInput.files[0];
		let enabled_two_factor_auth = $("#edit_profile_two_factor_checkbox").is(':checked');
		
		// création du form
		var formData = new FormData();
		formData.append("name", pseudo);
		formData.append("title_name", title_name);
		if (attachment != null) { formData.append("photo", attachment, "not_important.jpg"); }
		formData.append("enabled_two_factor_auth", enabled_two_factor_auth);

		// Affichage des paires clefs/valeurs
		console.log("current_user_id:", current_user_id);
		for (var pair of formData.entries()) {
		   console.log(pair[0]+ ', '+ pair[1]); 
		}
  
		$.ajax({
			url: 'users/' + <%= current_user.id %>, // >
			data: formData,
			cache: false,
        	contentType: false,
        	processData: false,
			type: 'PUT',
			success: function(res) {
				console.log("ok res: ", res);

				// cache le spinner:
				spinner.classList.remove("active");

				Swal.fire({
					icon: 'success',
					title: 'Your profile has been updated',
					showConfirmButton: false,
					timer: 2000
				})

				self.render();
			},
			error: function (err) {
				console.log("ko err:", err);

				// cache le spinner:
				spinner.classList.remove("active");

				let footer_msg = "";

				if (err.status == 401) {
					footer_msg = "Unauthorized";
				} else if (err.status == 422) {
					for (var key in err.responseJSON.data) {
						if (err.responseJSON.data.hasOwnProperty(key)) {
							console.log(key + " -> " + err.responseJSON.data[key]);
							footer_msg += (key + " " + err.responseJSON.data[key]);
						}
					}
					console.log("footer_msg:", footer_msg);
				}

				Swal.fire({
					icon: 'error',
					title: 'Oops...',
					text: 'Something went wrong!',
					footer: footer_msg
				})

				self.render();
			}
		})
	},

	render : async function() {
		let self = this;
		// console.log("Render Option");

		var user = new User({ id: current_user_id });
		user.urlRoot = "/users";
		await user.fetch();
		
		let titles;

		await $.ajax({
			url: 'users/' + current_user_id + '/titles',
			data: false,
			cache: false,
        	contentType: false,
        	processData: false,
			type: 'GET',
			success: function(res) {
				console.log("ok res: ", res);
				titles = res.data["titles"];
			},
			error: function (err) {
				console.log("ko err:", err);
				titles = [];
			}
		})

		console.log("titles:", titles);

		this.$el.html(this.template({
			user: user.toJSON(),
			titles: titles,
		}));

		// avatar
		$('#edit_profile_avatar_input').on('change', function() { });

		// checkbox
		if (user.get("enabled_two_factor_auth") == true) {
			$( "div.edit-profile-modal-btn" ).show();
		}
		else {
			$( "div.edit-profile-modal-btn" ).hide();
		}
		
		$(".form-check-input").change(function() {
			if (this.checked) { $( "div.edit-profile-modal-btn" ).show('slow') }
			else { $( "div.edit-profile-modal-btn" ).hide('slow'); }
		});
		
		return this;
	}
});

//_____________________________________ AdminView _____________________________________
var AdminView = Backbone.View.extend({
	el: '#inside-page',
	template: _.template($('#admin-template').html()),

	render: function(){
		console.log("ADMIN !!!!!!!");
		this.$el.html(this.template());
		chatview.setElement("#chat_area").render_admin_chat_view();
	}

});

//_____________________________________ PlayView _____________________________________
var PlayView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#play-template').html()),
	
	initialize : function() {
		console.log("PlayView created");
	},

	render : function(is_tournament) {
		tournament = is_tournament == true ? Date.now() : 0;
		this.$el.html(this.template);
		chatview.setElement("#chat_area").render_chat_main(); // https://solvemprobler.com/blog/2013/04/07/backbone-tips-rendering-views-and-their-childviews/
		console.log("Render Play");
		return this;
	},
	//new_game : function(){
	//	pongview.setElement("#pong-area").render();
	//	console.log("pong area");
	//}

})

//_____________________________________ ProfileView _____________________________________
var ProfileView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#profile-template').html()),
	user_cible: "",
	collection: usercollection,
  
	initialize : function() {
		console.log("Profile View initialized");
	},

	events: {
		"click #add_to_friend": "add_friend",
		"click #ask_a_duel": "ask_duel"
	},

	add_friend : async function() {
		friendshipcollection.url = "/friendships/?id=" + current_user_id; 
		await friendshipcollection.fetch();
		if (friendshipcollection.findWhere({id: user_cible})) {
			Swal.fire("", "You are already friend !", "error");
		}
		else
		{
			console.log("Add friend");
			var current_id = current_user_id;
			user = this.collection.findWhere({id: parseInt(current_id)});
			user = user.toJSON();
			message = user.name + " send you a friend request";
			type = "add_friend";
			if (current_id == user_cible)
			{
				Swal.fire("", "you can't be your own friend !", "error");	
			}
			var data = {
				from_user_id: current_id,
				user_id: user_cible,
				table_type: type,
				message: message,	
			}
			self = this
			Backbone.ajax({
				url: '/notifications/',
				data: JSON.stringify(data),
				type: 'post',
				dataType: 'json',
				contentType: 'application/json',
				error: function(response){
					if (response.status == 422)
						Swal.fire("", response.responseJSON.msg, "error");
				}
			});	
		}
	},

	ask_duel : async function() {
		console.log("Ask a duel");

		var data = {
			from_user_id: current_user_id,
			to_user_id: user_cible,
            game_type: "duel",
        }
		self = this
		Backbone.ajax({
			url: '/ask_for_games/',
			data: JSON.stringify(data),
			type: 'post',
			dataType: 'json',
			contentType: 'application/json',
			success: function(response) {
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
			},
			error: function(response){
				if (response.status == 422)
					Swal.fire("", response.responseJSON.msg, "error");
				else
					Swal.fire("", "error: " + response.status, "error");
			}
		});
	},

	render: async function(target_user_id) {
		
		await this.collection.fetch();
		
		target_user_id = parseInt(target_user_id);
		user_cible = target_user_id;

		var self = this;
		console.log("target_user_id:", target_user_id);
		$.ajax({
			url: 'users/' + current_user_id + '/profile?target_user_id=' + target_user_id, // >
			data: false,
			cache: false,
        	contentType: false,
        	processData: false,
			type: 'GET',
			success: function(res) {
				console.log("ok res: ", res);
				self.$el.html(self.template({
						current_user: res.data["current_user"],
						target_user: res.data["target_user"],
						guild: res.data["guild"],
						match_history: res.data["match_history"],
						friends: res.data["friends"],
						title: res.data["title"]
					})
				);
				return self;
			},
			error: function (err) {
				console.log("ko err:", err);
				Swal.fire({
					icon: 'error',
					title: 'Oops...',
					text: 'Something went wrong!',
					footer: "---"
				});
				self.$el.html(self.template({
						current_user: "",
						target_user: "",
						guild: "",
						match_history: "",
						friends: "",
						title: ""
					})
				);
				return self;		
			}
		})
	}
});

//_____________________________________ TournamentView _____________________________________
var TournamentView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#tournament-template').html()),
	template_tournament_details: _.template($("#tournament_details-template").html()),
  
	initialize : function() {
		console.log("TournamentView created");
	},
  
	render : function() {
		this.$el.html(this.template);
		console.log("Render Tournament");
		return this;
	},

	render_details: function(tournament_id){
		this.$el.html(this.template_tournament_details({tournament_id: tournament_id}));
		return this;
	}
});

//_____________________________________ WarView _____________________________________
var WarView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#war-template').html()),
	template_guilds: _.template($('#war-guild-template').html()),
	template_war_info: _.template($('#war_info_template').html()),
	collection: guildcollection,

	initialize : function() {
	},
	events: {
		"change #guild_drop_down": "render_guild_info",
		"submit #create_war": "add",
		"click #war_radom_match": "radom_match",
		"click .war_duel_btn": "duel_match",
		"click #quit_request": "quit_request"
	},
	quit_request: function(){
		console.log("quit_request");
		self = this;
		Backbone.ajax({
			url: 'ask_for_wars/is_in_request/?current_user_id=' + current_user_id,
			data: {},
			type: 'GET',
			success: function(response){
				if (response.ask_for_war_id == null){
					Swal.fire("", "To late to quit the request is already accept.", "error");
					self.render();
				}
				console.log("succes", response);
				Backbone.ajax({
					url: '/ask_for_wars/' + response.ask_for_war_id,
					data: {},
					type: 'DELETE',
					dataType: 'json',
					success: function(response) {
						console.log("delete ok");
						self.render();
					},
					error: function(){
						self.render();
					}
				});
			},
			error: function(){
				Swal.fire("", "error: " + response.status, "error");
			}
		});
	},
	duel_match: function(event){
		console.log("war duel", event.currentTarget.id);
		to_user_id = event.currentTarget.id.split("=")[1];
		console.log("war duel", to_user_id);

		var data = {
			from_user_id: current_user_id,
			to_user_id: to_user_id,
            game_type: "war_duel",
        }
		self = this
		Backbone.ajax({
			url: '/ask_for_games/',
			data: JSON.stringify(data),
			type: 'post',
			dataType: 'json',
			contentType: 'application/json',
			success: function(response) {
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
			},
			error: function(response) {
				if (response.status == 422){
					if (response.responseJSON.is_msg){
						Swal.fire("", response.responseJSON.msg, "error");
					}
				}
				else{
					Swal.fire("", "error: "+response.status, "error");
				}
			},
		});
	},
	radom_match: function(){
		console.log("radom_match");

		var data = {
			from_user_id: current_user_id,
            game_type: "war_random_match",
        }
		self = this
		Backbone.ajax({
			url: '/ask_for_games/',
			data: JSON.stringify(data),
			type: 'post',
			dataType: 'json',
			contentType: 'application/json',
			success: function(response) {
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
			},
			error: function(response) {
				if (response.status == 422){
					if (response.responseJSON.is_msg){
						Swal.fire("", response.responseJSON.msg, "error");
					}
				}
				else{
					Swal.fire("", "error: "+response.status, "error");
				}
			},
		});
	},
	add: async function(evt) {
		evt.preventDefault();

		if (guildcollection.length == 0){
			Swal.fire("", "The is no guild to declare war.", "error");
			return;
		}

		var guild_name = $("#guild_drop_down option:selected").text();
		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();

		range_time = $('#RangeTime').val();
		range_time = range_time.split(" to ");
		console.log("RangeTime", range_time[0], range_time[1]);
		if (isEmpty(range_time[0]) || isEmpty(range_time[1])){
			Swal.fire("", "Need range date to declare war", "error");
			return
		}

		let is_wartime = true;
		war_range_time = $('#WarRangeTime').val();
		war_range_time = war_range_time.split(" to ");
		console.log("WarRangeTime", war_range_time[0], war_range_time[1]);
		if (isEmpty(war_range_time[0]) || isEmpty(war_range_time[1])){
			is_wartime = false
		}

		var ask_for_war = new Ask_for_war({
			is_all_matches: $("#counted_match").is(':checked'),
			current_user_id: current_user_id,
			to_guild_id: the_guild.id,
			start_date: range_time[0],
			end_date: range_time[1],
			prize_in_points: $('#PrizePool').val(),
			max_unanswered_call: $('#MaxUnansweredMatch').val(),
			is_wartime: is_wartime,
			wt_start_date: war_range_time[0],
			wt_end_date: war_range_time[1]
		});

		self = this;
		ask_for_war.save(ask_for_war, {
			success: function(response) {
				response = response.toJSON();
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
					self.render();
				}
			},
			error: function(model, response) {
				if (response.status == 422){
					if (response.responseJSON.is_msg){
						Swal.fire("", response.responseJSON.msg, "error");
					}
				}
				else{
					Swal.fire("", "War declaration fail. (error= "+response.status+")", "error");
				}
			},
			wait: true
		});
	},
	render_guild_info : async function() {
		var guild_name = $("#guild_drop_down option:selected").text();
		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();
		
		var user = new User();
		user.urlRoot = "/users/" + the_guild.owner_id 
		await user.fetch();

		this.$('.war_pannel_header').html(this.template_guilds({
			user: user.toJSON(),
			guild: the_guild
		}));
	},
	render_param_guild : async function(id_guild) {
		await this.collection.fetch();
		this.$el.html(this.template({
				guilds: this.collection.toJSON(),
				is_in_request: null
		}));

		var the_guild = this.collection.findWhere({id: parseInt(id_guild, 10)});
		the_guild = the_guild.toJSON();
		$("#guild_drop_down").val(the_guild.name);

		var user = new User();
		user.urlRoot = "/users/" + the_guild.owner_id 
		await user.fetch();

		this.$('.war_pannel_header').html(this.template_guilds({
			user: user.toJSON(),
			guild: the_guild
		}));
	},
	render : async function() {
		await this.collection.fetch();

		
		if (this.collection.length == 0){
			var usr = new User();
			var the_guild = new Guild();

			this.$el.html(this.template({
				guilds: this.collection.toJSON(),
				is_in_request: null
			}));
			this.$('.war_pannel_header').html(this.template_guilds({
				user: usr.toJSON(),
				guild: the_guild.toJSON()
			}));
		}
		else {
			self = this
			Backbone.ajax({
				url: '/war_participations/war_info/?user_id=' + current_user_id,
				data: {},
				type: 'get',
				dataType: 'json',
				success: async function(response) {
					if (response.is_war){
						console.log("is war");
						self.$el.html(self.template_war_info({
							info: response,
							guilds: self.collection
						}));
						console.log("response: ", response);
					}
					else{
						Backbone.ajax({
							url: 'ask_for_wars/is_in_request/?current_user_id=' + current_user_id,
							data: {},
							type: 'GET',
							success: function(response){
								console.log("succes", response);

								self.$el.html(self.template({
									guilds: self.collection.toJSON(),
									is_in_request: response.is_in_request
								}));
								self.render_guild_info();
							},
							error: function(){
								Swal.fire("", "error: "+response.status, "error");
							}
						});
					}					
				},
			});
		}
		return this;
	}
});

//_____________________________________ LadderView _____________________________________
var LadderView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#ladder_template').html()),
  
	render: async function() {
		// ----------------------
		var users = new Users();
		users.url = "/users/ladder";
		await users.fetch();
		console.log(users.toJSON());
		
		
		// ----------------------

		this.$el.html(this.template({ladder: users.toJSON()}));
		await playercollection.fetch();
    	var players = playercollection.toJSON();
    	for (let i = 0; i < players.length; i++)
    	{
    	    if (players[i].user_id == current_user_id)
    	    {
    	        listbtnview.setElement("#btn_match_making").render(); 
    	    }
    	}
		return this;
	},
});

var ListbtnView = Backbone.View.extend({
	el : '#btn_match_making',
	template: _.template($('#quit_list').html()),
  
	render: function() {
		this.$el.html(this.template);
		return this;
	},
});

listbtnview = new ListbtnView();

//*************************************** Notification handler ***************************************

async function delete_notif(notif) {
	console.log("Delete notif")
	the_notif = notificationcollection.findWhere({id: notif.id});
	the_notif.urlRoot = "/notifications/";	
	await the_notif.destroy();
	notifview.render();	
};

async function ft_refuse_notif(notif) {
	if (notif.table_type == "ask_for_war"){
		Backbone.ajax({
			url: '/ask_for_wars/' + notif.table_id,
			data: {},
			type: 'DELETE',
			dataType: 'json',
			success: function(response) {
				delete_notif(notif);
			},
			error: function(){
				delete_notif(notif);
			}
		});
	}
	else if (notif.table_type == "ask_for_game"){
		Backbone.ajax({
			url: '/ask_for_games/' + notif.table_id,
			data: {},
			type: 'DELETE',
			dataType: 'json',
			success: function() {
				delete_notif(notif);
			},
			error: function(){
				delete_notif(notif);
			}
		});
	}
	else{
		delete_notif(notif);
	}
};

async function ft_accept_notif(notif) {
	console.log("Acceptnotif");
	if (notif.table_type == "add_friend"){			
		console.log("add friend");
		await friendshipcollection.fetch();
		if (friendshipcollection.findWhere({id: notif.from_user_id}))
		{
			Swal.fire("", "you are already friend", "success")
			delete_notif(notif);
			return ;
		}
		friend = new Friendship({sender_id: notif.from_user_id, recipient_id: notif.user_id, status: "active"});
		await friend.save();
		delete_notif(notif);
	}
	else if (notif.table_type == "ask_for_war") {
		console.log("ask_for_war");
		Backbone.ajax({
			url: '/ask_for_wars/' + notif.table_id,
			data: {},
			type: 'PUT',
			dataType: 'json',
			success: function(response){
				delete_notif(notif);
				Swal.fire("", response.msg, "success")
				.then((value) => {
					warview.render();
				});
			},
			error: function(response){
				if (response.status == 422){
					response = response.responseJSON;
					if (response.is_msg){
						Swal.fire("", response.msg, "error");
					}
					if (response.status != "keep_alive"){
						delete_notif(notif);
					}
				}
				else{
					Swal.fire("", "Request expired", "error");
					delete_notif(notif);
				}
			}
		});
	}
	else if (notif.table_type == "ask_for_game") {
		console.log("ask_for_game");
		var data = {
			user_id: current_user_id,
		}
		Backbone.ajax({
			url: '/ask_for_games/' + notif.table_id,
			data: JSON.stringify(data),
			contentType: 'application/json',
			type: 'PUT',
			dataType: 'json',
			success: function(response){
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
				launch_game(response.ask_for_game);
				delete_notif(notif);
			},
			error: function(response){
				if (response.status == 422){
					response = response.responseJSON;
					if (response.delete_notif){
						ft_refuse_notif(notif);
					}
					if (response.is_msg){
						Swal.fire("", response.msg, "error");
					}
				}
				else{
					Swal.fire("", "error: " + response.status, "error");
					//maybe delete notif...
				}
			}
		});
	}
	else if (notif.table_type == "guild_create"){
		guildparticip = new GuildParticipation({
			user_id: notif.from_user_id,
			guild_id: notif.table_id,
		});
		console.log("guildparticip", guildparticip.toJSON());

		guildparticip.save(guildparticip, {
			success: function(model, response) {
				Swal.fire("", "You have a new member in the guild.", "success");
				delete_notif(notif);
			},
			error: function(model, response) {
				if (response.status == 422){
					response = response.responseJSON;
					if (response.is_msg){
						Swal.fire("", response.msg, "error");
					}
					delete_notif(notif);
				}
				else{
					Swal.fire("", "error: " + response.status, "error");
				}
			},
			wait: true
		});
	}
};

//******************************************** Game launcher ********************************************

function launch_game(ask_for_game) {
	console.log("from_user_id: ", ask_for_game.from_user_id," to_user_id: ", ask_for_game.to_user_id, "id", ask_for_game.id);


	socket_notif.send(JSON.stringify({
		command: "message",
		identifier: JSON.stringify({
		channel: "PongnotChannel",
		pong_id: 0
		}),
		data: JSON.stringify({
			data: {
				id_host: ask_for_game.to_user_id,
				id_guest: ask_for_game.from_user_id,
				ask_id: ask_for_game.id,
				play: "true"
			}
		})
	}));
	playview.render();
	pongguest.setElement("#pong-area").render(ask_for_game.from_user_id);
}

async function ft_duel(target_id)
{
	console.log("Ask a duel");
	console.log(target_id)

		var data = {
			from_user_id: current_user_id,
			to_user_id: target_id,
            game_type: "duel",
        }
		self = this
		Backbone.ajax({
			url: '/ask_for_games/',
			data: JSON.stringify(data),
			type: 'post',
			dataType: 'json',
			contentType: 'application/json',
			success: function(response) {
				if (response.is_msg){
					Swal.fire("", response.msg, "success");
				}
			},
			error: function(response){
				if (response.status == 422)
					Swal.fire("", response.responseJSON.msg, "error");
				else
					Swal.fire("", "error: " + response.status, "error");
			}
		});
}

//******************************************** ROUTER ********************************************
var logview = new LogView();
var liveview = new LiveView();
var playview = new PlayView();
var guildview = new GuildView();
var optionview = new OptionView();
var adminview = new AdminView();
var profileview = new ProfileView();
var tournamentview = new TournamentView();
var warview = new WarView();
var ladderview = new LadderView();
var notifview = new NotifView();

document.addEventListener("notif2", function(event){
			notifview.render();
});

var Router = Backbone.Router.extend({
	routes: {
		'': "ft_log",
		'validation': "ft_validation",
		'live': "ft_live",
		'play': "ft_play",
		'guild': "ft_guild",
		'guild/:id_guild': "ft_guild_param",
		'admin': "ft_admin",
		'profile/:id_user': "ft_profile_param",
		'option': "ft_option",
		'tournament': "ft_tournament",
		'war/:id_guild': "ft_war_param",
		'war': "ft_war",
		'ladder': "ft_ladder"
	},
	ft_log: function() {
		logview.render();
	},
	ft_live: function() {
		liveview.render();
	},
	ft_play: function() {
		playview.render();
	},
	ft_ladder: function(){
		ladderview.render();
	},
	ft_guild: function() {
		guildview.render();
	},
	ft_guild_param: function(id_guild) {
		guildview.render_history(id_guild, false);
	},
	ft_admin: function(){
		adminview.render();
	},
	ft_profile_param: function(id_user) {
		profileview.render(id_user);
	},
	ft_option: function() {
		optionview.render();
	},
	ft_tournament: function() {
		tournamentview.render();
	},
	ft_war: function() {
		warview.render();
	},
	ft_war_param: function(id_guild) {
		warview.render_param_guild(id_guild);
	},
});

$( "#logo" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/", {trigger: true});
	if (last_url == "")
		Backbone.history.loadUrl();
});
$( "#nav_to_live" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/live", {trigger: true});
	if (last_url == "live")
		Backbone.history.loadUrl();
});
$( "#nav_to_play" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/play", {trigger: true});
	if (last_url == "play")
		Backbone.history.loadUrl();
});
$( "#nav_to_ladder" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/ladder", {trigger: true});
	if (last_url == "ladder")
		Backbone.history.loadUrl();
});
$( "#nav_to_guild" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/guild", {trigger: true});
	if (last_url == "guild")
		Backbone.history.loadUrl();
});
$("#nav_to_option").on("click", function(){
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/option", {trigger: true});
	if (last_url == "option")
		Backbone.history.loadUrl();
});
$("#nav_to_admin").on("click", function(){
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/admin", {trigger: true});
	if (last_url == "admin")
		Backbone.history.loadUrl();
});
$( "#nav_to_profile" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/profile/" + current_user_id, {trigger: true});
	if (last_url == "profile/" + current_user_id)
		Backbone.history.loadUrl();
});
$( "#nav_to_tournament" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/tournament", {trigger: true});
	if (last_url == "tournament")
		Backbone.history.loadUrl();
});
$( "#nav_to_war" ).on( "click", function() {
	var last_url = Backbone.history.getFragment();
	Backbone.history.navigate("/war", {trigger: true});
	if (last_url == "war")
		Backbone.history.loadUrl();
});

var myEvent = window.attachEvent || window.addEventListener; var chkevent = window.attachEvent ? 'onbeforeunload' : 'beforeunload'; 
myEvent(chkevent, async function(e) {
	var data = {
		        current_status: "offline",    
		    }
		    await Backbone.ajax({
		        url: '/users/' + current_user_id,
		        data: JSON.stringify(data),
		        type: 'put',
		        dataType: 'json',
		        contentType: 'application/json',
		        success: function(response) {
		        },
		        error: function(){
		            Swal.fire("", "error:", "error");
		        }
		    }); 
	var confirmationMessage = 'Are you sure to leave the page?'; 
	(e || window.event).returnValue = confirmationMessage; return confirmationMessage; 
});


var router = new Router();
playview.render();
notifview.render();
Backbone.history.start();

//******************************************** Utils ********************************************
function isEmpty(str) {
    return (!str || 0 === str.length);
}

</script>
<% else %>

<p>Too bad you're Banned</p>

<% end %>

<% end %>

