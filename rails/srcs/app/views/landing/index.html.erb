<%= stylesheet_link_tag "style-header.css" %>

<% if !current_user %> <!-- user not connected-->
	<%= render "pages/signin" %>

<% else %> 
	<%= render "pages/navbar" %>

	<script>
		document.dispatchEvent(new CustomEvent("logged", {
			detail: {id: <%= current_user.id %>} //>#color patch
		}));
		document.addEventListener("notif", function(event){
			console.log("notif listener");
			console.log(event.detail.data);
			if (event.detail.data.sender)
			{
				console.log("hey" + $("#main_chat_in").val());
				console.log(event.detail.data);
				console.log("channel_name" + event.detail.data.sender.id);
				if ($("#main_chat_in").val() == event.detail.data.sender.id)//utiliser id plutot ?
					chatview.setElement("#chat_area").render_chat_main(event.detail.data.sender);
			}
			if (event.detail.data.kicked_from)
			{
				console.log(event.detail.data);
				console.log($("#detail_chat_in").val());
				alert("you got kicked from " + event.detail.data.kicked_from.id);
				if (($("#detail_chat_in").val() == event.detail.data.kicked_from.id || $("#main_chat_in").val() == event.detail.data.kicked_from.id) && event.detail.data.kicked_from.scope != "direct")
				{
					console.log("in");
					chatview.setElement("#chat_area").render_chat_main();//marche pas quand on est dans show par exemple
				}
			}
			var hidden_input_val = $("#main_chat_in").val();
			console.log("hidden" + hidden_input_val);
		});
		// set the socket for having notification 
		socket_notif = new WebSocket("ws://localhost:3000/cable"); 
		socket_notif.onopen=  function()
		{
			console.log("openn");
			socket_notif.send(JSON.stringify({
				command: "subscribe",
				identifier: JSON.stringify({
					channel: "PongnotChannel",
					pong_id: 0
				})
			}));
		}

	</script>

	<div class="container-fluide body-page" id="inside-page">
		<%= render "pages/log" %>
		<%= render "pages/live" %>
		<%= render "pages/play" %>
		<%= render "pages/guild" %>
		<%= render "pages/option" %>
		<%= render "pages/profil" %>
		<%= render "pages/profil2" %>
		<%= render "pages/tournament" %>
		<%= render "pages/war" %>
		<%= render "pages/all_guild" %>
		<%= render "pages/chat/param" %>
		<%= render "pages/chat/create" %>
		<%= render "pages/chat/main" %>		
		<%= render "pages/pongHost" %>
		<%= render "pages/pongGuest"%>
		<%= render "pages/guild_history" %>
		<%= render "pages/chat/details" %>
		<%= render "pages/war_info" %>
		<%= render "pages/ladder" %>
	</div>


<script>

//****************************** GLOBAL ***************************
var current_user_id = <%= current_user.id %>; // anti jaune >

// ******************************************** MODELS/COLLECTIONS ********************************************
//_____________________________________ User _____________________________________
var User = Backbone.Model.extend({
	urlRoot: "/users.json",

	defaults: {
		name: '',
		avatar: '',
		current_status: 'Online',
		points: 42,
		is_admin: true
	},

	initialize : function() {
		console.log("UserModel created");
	  },
});

var Users = Backbone.Collection.extend({
	modele: User,
	url: "/users.json",

	initialize : function() {
		console.log("UserCollection created");
	}
});

var usercollection = new Users();

//_____________________________________ Guild _____________________________________
var Guild = Backbone.Model.extend({
	urlRoot: "/guilds.json",

	defaults:{
		name: "No guild",
		points:"0",
	}
});

var Guilds = Backbone.Collection.extend({
	model: Guild,
	url: "/guilds.json",

	initialize : function() {
		console.log("UserCollection created");
	}
});

var GuildParticipation = Backbone.Model.extend({
	urlRoot: "/guild_participations",
});

var guildcollection = new Guilds();

//_____________________________________ Friendship _____________________________________

var Friendship = Backbone.Model.extend({
	urlRoot: "/friendships.json",

});

var Friendships = Backbone.Collection.extend({
	model: Friendship,
	url: "/friendships.json",

	initialize : function() {
		console.log("Collection created");
	}
});

var friendshipcollection = new Friendships();

//____________________________________ War _____________________________________

var War = Backbone.Model.extend({
	urlRoot: "/wars.json",
});

var Wars = Backbone.Collection.extend({
	model: War,
	url: "/wars.json",
});

var Ask_for_war = Backbone.Model.extend({
	urlRoot: "/ask_for_wars.json",
});

var WarParticipation = Backbone.Model.extend({
	urlRoot: "/war_participations.json",
});

var Game = Backbone.Model.extend({
	urlRoot: "/games.json",

});

//____________________________________ Game _____________________________________

var Games = Backbone.Collection.extend({
	model: Game,
	url: "/games.json",

	initialize : function() {
	}
});

var gamecollection = new Games();

//_____________________________________ Notification _____________________________________

var Notification = Backbone.Model.extend({
	urlRoot: "/notifications.json",

});

var Notifications = Backbone.Collection.extend({
	model: Notification,
	url: "/notifications.json",

	initialize : function() {
	}
});

var notificationcollection = new Notifications();

//******************************************** VIEWS ********************************************
//_____________________________________ LogView _____________________________________
var LogView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#log-template').html()),
	collection: usercollection,

	initialize : async function() {
		console.log("LogView created");
		this.listenTo(this.collection, 'add remove', this.render, this);
		this.collection.url = "/users.json";
	  	await this.collection.fetch({wait: true});
	},

	events: {
    	"click #add-user": "add",
    	"click #delete-user": "delete",
    	"click #logout ": "logout",
  	},

	render : function() {
	  	console.log("Render Log");
		this.$el.html(this.template({usr: this.collection.toJSON()}));
	  	return this;

	},

	add: function() {
		console.log("Add user");
		var user = new User({name : 'hemil', autre:'tete'});
		this.collection.create(user);
		this.render();
	 },
	 
  	delete: function() {
		console.log("Delete user");
		var users = this.collection.toJSON();
		var user = users[users.length - 1];
		if (user){
			var to_delete = this.collection.get(user.id);
	  		this.collection.url = "/users"
			to_delete.destroy();
			this.render();
		}	
	 },
	  
	logout: function() { 
		var session_id = <%== current_user.sessions.last.id %>; // anti jaune >
		$.ajax({
			url: "/sessions/" + session_id,
			data: false,
			processData: false,
			contentType: false,
			type: 'DELETE',
			success: function(){
				console.log("DELETE sent !");
				window.location.href = "http://localhost:3000";
			}
		})
		
	},

})

//_____________________________________ NotifView _____________________________________
var NotifView = Backbone.View.extend({
	el : '#notif_item',
	template: _.template($('#notif-template').html()),
	collection: notificationcollection,

	initialize : function() {
	},

	render : async function() {
		await this.collection.fetch();

		this.$el.html(this.template({notification: this.collection.toJSON()}));
		console.log("Render Notif");
		return this;
	},
})

//_____________________________________ ChatView _____________________________________
var ChatView = Backbone.View.extend({
	template_chat_main: _.template($('#chat_main-template').html()),
	template_chat_param: _.template($('#chat_param-template').html()),
	template_chat_create: _.template($('#chat_create-template').html()),
	template_chat_details: _.template($('#chat_details-template').html()),
	
	events: {
		"click #main_chat_to_param": "render_chat_param",
		"click #main_chat_to_create": "render_chat_create",
		"click #back_to_main_chat": "render_chat_main",
		"click #show_chat_details": "render_chat_details"
	},

	render_chat_param : function() {
		this.$el.html(this.template_chat_param);
	},
	render_chat_create : function() {
		this.$el.html(this.template_chat_create);
	},
	render_chat_main : function(user_selected) {
		console.log("user selected !!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
		console.log(user_selected)
		if (user_selected && user_selected.name)
		{
			console.log("render_chat_main" + user_selected.name);
			if (user_selected.scope == "direct")
			{
				var el = this.$el;
				var temp = this.template_chat_main;
				var ChannelParticipation = Backbone.Model.extend({
					urlRoot: '/channel_participations'
				});
				var channel_participation = new ChannelParticipation();
				channel_participation.fetch({data: {type: "direct", name: user_selected.name}, success: function(data){
					var i = 0;
					var target;
					data = data.toJSON();
					var size = Object.keys(data).length;
					while (i < size)
					{
						if (data[i].id != current_user_id)
						{
							target = data[i];
							break;
						}
						i++;
					}
					console.log("name" + target);
					console.log(user_selected);
					el.html(temp({receiver: user_selected, target: target}));
				}})
			}
			else
			{
				this.$el.html(this.template_chat_main({receiver: user_selected}));
			}
		}
		else
		{
			user_selected = {id : 0}
			this.$el.html(this.template_chat_main({receiver: user_selected}));
		}
		return this;
	},
	render_chat_details : function(e) {
		console.log(e);
		var channel_info = e;
		if (!(channel_info.id))
			channel_info = $(e.currentTarget).data('channel');
		console.log(channel_info);
		this.$el.html(this.template_chat_details({channel: channel_info}));
	}
});

var chatview = new ChatView();

//_____________________________________ GuildView _____________________________________
var GuildView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#guild-template').html()),
	template_all_guild: _.template($('#all_guild-template').html()),
	template_guild_history: _.template($('#guild_history_template').html()),
	collection: guildcollection,

	initialize : function() {
		console.log("GuildView created");
	},
	events: {
		"click #all_guild_btn": "render_all_guild",
		"click #back_to_guild": "render",
		"click #leave_guild_btn": "delete",
		"click .name_score": "go_to_guild",
		"submit #create_guild": "add",
		"submit #join_a_guild": "join",
	},
	join: function(evt) {
		evt.preventDefault();
		console.log("Join guild");

		var guild_name = $("#all_guild_dropdown option:selected").text();
		console.log("guild_name", guild_name)

		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();

		guildparticip = new GuildParticipation({
			user_id: current_user_id,
			guild_id: the_guild.id,
		});
		console.log("guildparticip", guildparticip.toJSON());

		var self = this;
		this.collection.create(guildparticip, {
			success: function(model, response) {
				console.log('success');
				self.render();
			},
			error: function(model, response) {
				alert('Fail to join the guild');
			},
			wait: true
		});
	},
	add: async function(evt) {
		evt.preventDefault();

		var guild = new Guild({
			name : $('#inputGuildName').val(),
			anagram: $('#inputGuildAnagram').val(),
			owner_id : current_user_id,
			user_id: current_user_id,
		});
		var self = this;
		this.collection.create(guild, {
			success: function(model, response) {
				if (response.is_msg){
					alert(response.msg)
				}
				else{
					self.render();
				}
			},
			error: function(model, response) {
				alert("Guild creation failed")
			},
			wait: true
		});
	},
	delete: async function() {
		var user = new User();
		user.urlRoot = "/users/" + current_user_id 
		await user.fetch();
		user = user.toJSON();

		guildparticip = new GuildParticipation({
			id: user.guild_participation_id,
		});
		var self = this;
		guildparticip.destroy({
			success: function(model, response) {
				self.render();
			},
			error: function(model, response) {
				alert("Fail to guit the guild, be sure you are not in war.");
			},
			wait: true
		});
	},
	render : async function() {
		await this.collection.fetch();// obligatoire ?

		var user = new User();
		user.urlRoot = "/users/" + current_user_id
		await user.fetch();
		user = user.toJSON();

		if (user.guild_participation_id != null){
			var guild_p = new GuildParticipation();
			guild_p.urlRoot = "/guild_participations/" + user.guild_participation_id
			await guild_p.fetch();
			guild_p = guild_p.toJSON();

			this.render_history(guild_p.guild_id, true);
		}
		else{
			await this.collection.fetch();
			this.$el.html(this.template({
				guilds: this.collection.toJSON()
			}));
		}
		return this;
	},
	render_history: async function(guild_id, is_current_user_guild)
	{
		//#Header
		var guild = new Guild();
		guild.urlRoot = "/guilds/" + guild_id 
		await guild.fetch();
		guild = guild.toJSON();

		var owner = new User();
		owner.urlRoot = "/users/" + guild.owner_id
		await owner.fetch();

		//#history
		var wars = new Wars();
		wars.url = "/wars.json/?guild_id=" + guild.id;
		await wars.fetch();

		this.$el.html(this.template_guild_history({  
			wars: wars.toJSON(),
			guilds: this.collection,
			guild: guild,
			owner: owner.toJSON(),
			is_current_user_guild,
		}));
	},
	render_all_guild : async function() {
		await this.collection.fetch();
		await usercollection.fetch(); //# good practice ?

		this.$el.html(this.template_all_guild({
			guilds: this.collection.toJSON(),
			usr: usercollection
		}));
		return this;
	}
})

//_____________________________________ PongView _____________________________________
var PongView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($("#pongHost-template").html()),
	render : function() {
		this.$el.html(this.template);
		return this;
	}
});

var pongview = new PongView();

//_____________________________________ PongGuest _____________________________________
var PongGuest = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($("#pongGuest-template").html()),
	render : function() {
		this.$el.html(this.template);
		return this;
	}
});

var pongguest = new PongGuest();

//_____________________________________ LiveView _____________________________________
var LiveView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#live-template').html()),

	initialize : function() {
		console.log("LiveView created");
	},

	render : function() {
		this.$el.html(this.template);
		chatview.setElement("#chat_area").render_chat_main(); // https://solvemprobler.com/blog/2013/04/07/backbone-tips-rendering-views-and-their-childviews/
		console.log("Render Live");
		return this;
	},
})

//_____________________________________ OptionView _____________________________________
var OptionView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#option-template').html()),
  
	initialize : function() {
		console.log("OptionView created");
	},
  
	render : function() {
	  this.$el.html(this.template);
		console.log("Render Option");
		return this;
	}
});

//_____________________________________ PlayView _____________________________________
var PlayView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#play-template').html()),
	
	initialize : function() {
		console.log("PlayView created");
	},

	render : function() {
		this.$el.html(this.template);
		chatview.setElement("#chat_area").render_chat_main(); // https://solvemprobler.com/blog/2013/04/07/backbone-tips-rendering-views-and-their-childviews/
		console.log("Render Play");
		return this;
	},
	new_game : function(){
		pongview.setElement("#pong-area").render();
		console.log("pong area");
	}

})

//_____________________________________ ProfilView _____________________________________
var ProfilView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#profil-template').html()),
	collection: usercollection,
  
	initialize : function() {
		console.log("ProfilView created");
	},
  
	render : async function() {
		console.log("Render Profil");
		var current_id = current_user_id;
		//var current_id = 4;
		await this.collection.fetch();
		current_user = this.collection.findWhere({id: current_id});
	
		//guild = new Guild();
		//guild.url = "/guild_participations/" + current_id + ".json"
		//await guild.fetch();

	
		friendshipcollection.url = "/friendships/?id=" + current_id; 
		await friendshipcollection.fetch();

		//gamecollection.url = "/games" + current_id;
		//await gamecollection.fetch();
		//console.log(gamecollection.toJSON())
	
		//this.$el.html(this.template({user: current_user.toJSON(), guild: guild.toJSON(), friend: friendshipcollection.toJSON()}));
		this.$el.html(this.template({user: current_user.toJSON(), friend: friendshipcollection.toJSON()}));
		return this;
	}
});

//_____________________________________ Profil2View _____________________________________
var Profil2View = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#profil2-template').html()),
	collection: usercollection,
	user_cible: 0,

	events: {
		"click #return": "return_profil",
		"click #add_to_friend": "add_friend",
		"click #ask_a_duel": "ask_duel"

	},
  
	initialize : function() {
		console.log("Profil2View created");
	},
  
	render : async function(id_user) {
		console.log("Render Profil2");
		user_cible = parseInt(id_user);
		await this.collection.fetch();
		user = this.collection.findWhere({id: parseInt(id_user)});
		//guild = new Guild();
		//guild.url = "/guild_participations/" + id_user + ".json"
		//await guild.fetch();

		this.$el.html(this.template({user: user.toJSON()}));
		//this.$el.html(this.template({user: user.toJSON(), guild: guild.toJSON()}));
		return this;
	},

	return_profil : function() {
		Backbone.history.navigate("/profil", {trigger: true});
		Backbone.history.loadUrl();	
	},

	add_friend : async function() {
		friendshipcollection.url = "/friendships/?id=" + current_user_id; 
		await friendshipcollection.fetch();
		if (friendshipcollection.findWhere({id: user_cible}))
		{
			alert("You are already friend !");
		}
		else
		{
			console.log("Add friend");
			var current_id = current_user_id;
			user = this.collection.findWhere({id: parseInt(current_id)});
			user = user.toJSON();
			message = user.name + " send you a friend request";
			type = "add_friend";
			notif = new Notification({from_user_id: current_id, user_id: user_cible, table_type: type, message: message});
			await notif.save();
		}
	},

	ask_duel : async function() {
		console.log("Ask a duel");
		var current_id = current_user_id;
		user = this.collection.findWhere({id: parseInt(current_id)});
		user = user.toJSON();
		message = user.name + " challenge you";

		notif = new Notification({from_user_id: current_id, user_id: user_cible, message: message});
		await notif.save();

	},
});


//_____________________________________ TournamentView _____________________________________
var TournamentView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#tournament-template').html()),
  
	initialize : function() {
		console.log("TournamentView created");
	},
  
	render : function() {
	  this.$el.html(this.template);
		console.log("Render Tournament");
		return this;
	}
});

//_____________________________________ WarView _____________________________________
var WarView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#war-template').html()),
	template_guilds: _.template($('#war-guild-template').html()),
	template_war_info: _.template($('#war_info_template').html()),
	collection: guildcollection,

	initialize : function() {
	},
	events: {
		"change #guild_drop_down": "render_guild_info",
		"submit #create_war": "add"
	},
	add: async function(evt) {
		evt.preventDefault();
		console.log("IN add war");

		var guild_name = $("#guild_drop_down option:selected").text();
		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();

		//#do this check back for better security
		range_time = $('#RangeTime').val();
		range_time = range_time.split(" to ");
		console.log("RangeTime", range_time[0], range_time[1]);
		if (isEmpty(range_time[0]) || isEmpty(range_time[1])){
			alert("Need range date to declare war")
			return
		}

		var ask_for_war = new Ask_for_war({
			is_all_matches: $("#counted_match").is(':checked'),
			current_user_id: current_user_id,
			to_guild_id: the_guild.id,
			start_date : range_time[0],
			end_date: range_time[1],
			prize_in_points : $('#PrizePool').val(),
			max_unanswered_call: $('#MaxUnansweredMatch').val(),
		});

		ask_for_war.save(ask_for_war, {
			success: function(response) {
				if (response.toJSON().is_msg){
					alert(response.toJSON().msg);
				}
			},
			error: function(model, response) {
				alert("War declaration fail.");
			},
			wait: true
		});
	},
	render_guild_info : async function() {
		var guild_name = $("#guild_drop_down option:selected").text();
		var the_guild = this.collection.findWhere({name: guild_name});
		the_guild = the_guild.toJSON();
		
		var user = new User();
		user.urlRoot = "/users/" + the_guild.owner_id 
		await user.fetch();

		this.$('.war_pannel_header').html(this.template_guilds({
			user: user.toJSON(),
			guild: the_guild
		}));
	},
	render_param_guild : async function(id_guild) {
		await this.collection.fetch();
		this.$el.html(this.template({
				guilds: this.collection.toJSON()
		}));

		var the_guild = this.collection.findWhere({id: parseInt(id_guild, 10)});
		the_guild = the_guild.toJSON();
		$("#guild_drop_down").val(the_guild.name);

		var user = new User();
		user.urlRoot = "/users/" + the_guild.owner_id 
		await user.fetch();

		this.$('.war_pannel_header').html(this.template_guilds({
			user: user.toJSON(),
			guild: the_guild
		}));
	},
	render : async function() {
		await this.collection.fetch();

		//# To do: mieux gérer 0 guilds
		if (this.collection.length == 0){
			var usr = new User();
			var the_guild = new Guild();

			this.$el.html(this.template({
				guilds: this.collection.toJSON()
			}));
			this.$('.war_pannel_header').html(this.template_guilds({
				user: usr.toJSON(),
				guild: the_guild.toJSON()
			}));
		}
		else {	
			this.$el.html(this.template({
				guilds: this.collection.toJSON()
			}));
			this.render_guild_info();
			//#page war info when guild is in war
			//this.$el.html(this.template_war_info());
		}
		return this;
	}
});

var LadderView = Backbone.View.extend({
	el : '#inside-page',
	template: _.template($('#ladder_template').html()),
  
	render: function() {
		this.$el.html(this.template);
		return this;
	}
});

//*************************************** Notification handler ***************************************

async function delete_notif(notif) {
	console.log("Delete notif")
	the_notif = notificationcollection.findWhere({id: notif.id});
	the_notif.urlRoot = "/notifications/";	
	await the_notif.destroy();
	notifview.render();	
};

async function ft_refuse_notif(notif) {
	if (notif.table_type == "ask_for_war"){
		Backbone.ajax({
			url: '/ask_for_wars/' + notif.table_id,
			data: {},
			type: 'DELETE',
			dataType: 'json',
			success: function(response) {
				console.log("Inside success");
				delete_notif(notif);
			},
			error: function(){
				alert("error");
			}
		});
	}
	else{
		delete_notif(notif);
	}
};

function ft_accept_notif(notif) {
	console.log("Acceptnotif");
	if (notif.table_type == "add_friend"){			
		console.log("add friend");
		friend = new Friendship({user1_id: notif.from_user_id, user2_id: notif.user_id});
		friend.save();
		delete_notif(notif);
	}
	else if (notif.table_type == "ask_for_war") {
		console.log("ask_for_war");
		Backbone.ajax({
			url: '/ask_for_wars/' + notif.table_id,
			data: {},
			type: 'PUT',
			dataType: 'json',
			success: function(response){
				if (response.is_msg){
					alert(response.msg)
					if (response.status != "keep_alive"){
						delete_notif(notif);
					}
				}
				else{
					delete_notif(notif);
				}
			},
			error: function(){
				alert("error");
			}
		});
	}
};

//******************************************** ROUTER ********************************************
var logview = new LogView();
var liveview = new LiveView();
var playview = new PlayView();
var guildview = new GuildView();
var optionview = new OptionView();
var profilview = new ProfilView();
var profil2view = new Profil2View();
var tournamentview = new TournamentView();
var warview = new WarView();
var ladderview = new LadderView();
var notifview = new NotifView();

document.addEventListener("notif2", function(event){
			notifview.render();
});

var Router = Backbone.Router.extend({
	routes: {
		'': "ft_log",
		'live': "ft_live",
		'play': "ft_play",
		'guild': "ft_guild",
		'guild/:id_guild': "ft_guild_param",
		'option': "ft_option",
		'profil': "ft_profil",
		'tournament': "ft_tournament",
		'war/:id_guild': "ft_war_param",
		'war': "ft_war",
		'profil/:id_user': "ft_profil_param",
		'ladder': "ft_ladder"
	},
	ft_log: function() {
		logview.render();
	},
	ft_live: function() {
		liveview.render();
	},
	ft_play: function() {
		playview.render();
	},
	ft_ladder: function(){
		ladderview.render();
	},
	ft_guild: function() {
		guildview.render();
	},
	ft_guild_param: function(id_guild) {
		guildview.render_history(id_guild, false);
	},
	ft_option: function() {
		optionview.render();
	},
	ft_profil: function() {
		profilview.render();
	},
	ft_tournament: function() {
		tournamentview.render();
	},
	ft_war: function() {
		warview.render();
	},
	ft_war_param: function(id_guild) {
		warview.render_param_guild(id_guild);
	},
	ft_profil_param: function(id_user) {
		profil2view.render(id_user);	
	}
});


$( "#logo" ).on( "click", function() {
	Backbone.history.navigate("/", {trigger: true});
});
$( "#nav_to_live" ).on( "click", function() {
	Backbone.history.navigate("/live", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_play" ).on( "click", function() {
	Backbone.history.navigate("/play", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_ladder" ).on( "click", function() {
	Backbone.history.navigate("/ladder", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_guild" ).on( "click", function() {
	Backbone.history.navigate("/guild", {trigger: true});
	//Backbone.history.loadUrl(); //problem: Double call to function render in guild
});
$( "#nav_to_option" ).on( "click", function() {
	Backbone.history.navigate("/option", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_profil" ).on( "click", function() {
	Backbone.history.navigate("/profil", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_tournament" ).on( "click", function() {
	Backbone.history.navigate("/tournament", {trigger: true});
	Backbone.history.loadUrl();
});
$( "#nav_to_war" ).on( "click", function() {
	Backbone.history.navigate("/war", {trigger: true});
	Backbone.history.loadUrl();
});

var router = new Router();
playview.render();
notifview.render();
Backbone.history.start();

//******************************************** Utils ********************************************
function isEmpty(str) {
    return (!str || 0 === str.length);
}

</script>

<% end %>