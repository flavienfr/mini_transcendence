<script type = "text/template" id = "pongGuest-template">
<%= stylesheet_link_tag "style-live-play.css" %>



<script>
    var current_user_id = <%== current_user.id%>  // anti jaune >
    var time_pause = 10
    
    function play(host_id)
    {
        canvas.style.cursor = "none";
        var timer = 5;
        var own_score = 0;
        var height = canvas.height;
        var width = canvas.width;


//-------------------------------part 1 functions draw--------------------------------------//
        // draw score
        function drawScore(x, y,score ,color){
            context.fillStyle = color;
            context.font = '48px serif';
            context.beginPath();
            context.fillText(score, x, y);
            context.closePath();
        }

        //draw the line at the middle
        function drawMiddleLine(line){
            for(let i =  0; i <= canvas.height; i += canvas.height/20){  // pas responsive
                drawRect(line.x, line.y + i, line.width, line.height, line.color);
            }
        }
        // draw rect
        function drawRect(x,y,w,h,color){
            context.fillStyle = color;
            context.beginPath();
            context.fillRect(x,y,w,h);
            context.closePath();
        }

        // draw ball
        function drawBall(x,y,r,color){
            context.fillStyle = color;
            context.beginPath(); //each call permite to clean the last arc
            context.arc(x,y,r,0, Math.PI*2, false);
            context.closePath();
            context.fill();
        }

        function endText(txt) // said who win and loose
        {
            context.fillStyle = "GREY";
            context.font = '48px serif';
            context.beginPath();
            context.fillText(txt, canvas.width/2 * 0.7, canvas.height / 2);
            context.closePath();
        }

        function fpsText(txt)
        {
            context.fillStyle = "GREY";
            context.font = '38px serif';
            context.beginPath();
            context.fillText(txt, canvas.width * 0.85, canvas.height * 0.05);
            context.closePath();
        }
//-------------------------------part 2 object gamer host padlle and ball--------------------------------------//
        //host
        const host = { 
            //position
            x : 0, 
            y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive
            //form 
            width : 10, // pas responsive
            height : canvas.height/5, // pas responsive
            color : "GREY",
            score : 0
            }
        //ball
        const ball =  {
            //position
            x : canvas.width/2,
            y : canvas.height/2, // for be at the center
            //form
            radius : 10, // pas responsive
            color : "RED",
            //deplacement
        }
        //line
        const line = {
            //pos
            x : canvas.width / 2 - 1, 
            y : 0,
            //form
            width : 2, 
            height : 10,
            color : "WHITE"
        }

//-------------------------------part 3 draw in canvas--------------------------------------//

        function show(){ // create a new map the order is important
        // const part
            drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
            drawMiddleLine(line);
            drawScore(canvas.width/4, canvas.height/5, host.score, "WHITE");
            drawScore(3 * canvas.width/4, canvas.height/5, own_score, "WHITE");
            fpsText(medium_fps + " FPS")
            // move part
            drawRect(host.x, host.y, host.width, host.height, host.color);
            drawRect(gamer.x, gamer.y, gamer.width, gamer.height, gamer.color);
            if (pause < frame * 2 - 4)
                drawBall(ball.x, ball.y, ball.radius, ball.color);
            else
            {
                drawRect(0,0, canvas.width, canvas.height,"BLACK");
                endText("    pause");
            }

        }
        
        function ft_timer(val) // make a countdown
        {
            drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
            context.fillStyle = "WHITE";
            context.font = '48px serif';
            context.beginPath();
            context.fillText(val, canvas.width / 2 * 0.95 , canvas.height / 2);
            context.closePath();
        }


//-------------------------------part 4 pause function --------------------------------------//

        function ft_pause() 
        {
            if (pause == 1)
            {
                pause++;
                time_pause = Date.now();
            }
            if (pause > 1 && Date.now() - time_pause > 2000)
                pause_gamer = true;  
        }

//-------------------------------part 5 function paddle --------------------------------------//

 
//-------------------------------part 6  socket receive and send --------------------------------------//

   
socket.onmessage = function(event) 
{            
const response = event.data;
const msg = JSON.parse(response);  
    if (msg.type == "ping" || !msg.message )// check if the pong_id is send to the correct personne
        return ;
    if (msg.message.data == "stop")
        own_score = 11;
    if (msg.message.data.timer == 0 || msg.message.data.timer)
        timer = msg.message.data.timer;
    if (msg.message.data.hosty)
        host.y = msg.message.data.hosty;
    if (msg.message.data.bally)
        ball.y = msg.message.data.bally;
    if (msg.message.data.ballx)
        ball.x = msg.message.data.ballx;
    if (msg.message.data.score_host)
        host.score = msg.message.data.score_host;  
    if (msg.message.data.score_guest)
        own_score = msg.message.data.score_guest;
}
        

        function ft_send(host_id)
        {
            socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id,
                    user_id: <%== current_user.id %> // ici il marche pas 
                }),
                data: JSON.stringify({
                    data: {guesty: gamer.y, pause_guest: pause_gamer}
                })
            }));
        }

//-------------------------------part 7 play on gamer view --------------------------------------//

        function playing(host_id)
        {
            fps++;
            // if (timer < 0)
            //     ft_pause(); // uncomment to put the pause rules
            if (timer < 0 && document.hidden == false && host.score < 11 && own_score < 11)
            {
                ft_send(host_id);
                show();
            }
            else
            {
                ft_timer((timer == 0) ? "GO !" : timer);
                pause = 0;
            }
            if (host.score >= 11 || own_score >= 11)
            {
                clearInterval(stop);
                drawRect(0,0, canvas.width, canvas.height,"BLACK");
                if (host.score != 11)
                    endText("You win !!!");
                else
                    endText("You loose ... ");
                socket.close();
                setTimeout(() => {playview.render();}, 2000); // permet au joueur de voir s'il a gagnÃ© ou perdu
            }
            get_fps();
            if (document.hidden == true)
                host.score = 11;
        }
    var stop = setInterval(playing, 1000/(frame), host_id);
    }

    function get_fps()
    {
        if (Date.now() - start > 1000)
        {
            medium_fps = fps;
            fps = 0;
            start = Date.now();
        }
    }

//-------------------------------MAIN --------------------------------------//
window.onbeforeunload = function() {
    clearInterval(stop);
    socket.onclose = function () {socket.close();
    console.log("socket pongchannel close")}; // disable onclose handler first
};



var socket = new WebSocket('<%= ENV["action_cable_url"] %>');
var fps  = 0;
var start = Date.now();
var time_pause = Date.now();

socket.onopen = function()
{         
    // var AskForGame = Backbone.Model.extend({
    //     urlRoot: '/ask_for_games'
    // })
    // var ask_for_game = new AskForGame();
    // ask_for_game.fetch({data: {to_user_id: current_user_id, status: "playing"}, success: function() {
        // var host_id = ask_for_game.get('from_user_id');
        socket.send(JSON.stringify({
            command: "subscribe",
            identifier: JSON.stringify({
                channel: "PongChannel",
                pong_id: <%%= host_id %>,
                user_id: <%== current_user.id %>
            })
        }));
        play(<%%= host_id %>);
    // }});
}


</script>
</script> 