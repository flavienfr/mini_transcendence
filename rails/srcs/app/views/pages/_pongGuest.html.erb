<script type = "text/template" id = "pongGuest-template">
<%= stylesheet_link_tag "style-live-play.css" %>

<div id = "pong-id" data-pong-id= <%=current_user.id%>> </div>
<canvas id="pongid" width="800px" height="600px" > </canvas>

<script>
 var current_user_id = <%== current_user.id%>

function playing(host_id)
{
    const canvas = document.getElementById("pongid");
    const context = canvas.getContext("2d");
    const element = document.getElementById("pong-id");
    pong_id = element.getAttribute("data-pong-id");
    canvas.addEventListener("mousemove", movePaddle);
    canvas.addEventListener("mouseleave", pauseGame);
    var pause_guest = false;
    var timer = 5;
    // part 1 functions draw
    // draw score
    function drawScore(x, y,score ,color){
        context.fillStyle = color;
        context.font = "35px fantasy"; // pas responsive
        context.beginPath();
        context.fillText(score, x, y);
        context.closePath();
    }

    //draw the line at the middle
    function drawMiddleLine(line){
        for(let i =  0; i <= canvas.height; i += 13){  // pas responsive
            drawRect(line.x, line.y + i, line.width, line.height, line.color);
        }
    }

    // draw rect
    function drawRect(x,y,w,h,color){
        context.fillStyle = color;
        context.beginPath();
        context.fillRect(x,y,w,h);
        context.closePath();
    }

    // draw ball
    function drawBall(x,y,r,color){
        context.fillStyle = color;
        context.beginPath(); //each call permite to clean the last arc
        context.arc(x,y,r,0, Math.PI*2, false);
        context.closePath();
        context.fill();
    }

    //part 2 users padlle
    //host
    const host = { 
        //position
        x : 0, 
        y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive
        //form 
        width : 10, // pas responsive
        height : 100, // pas responsive
        color : "GREY",
        score : 0
    }
    //guest
    const guest = {
        //position
        x : canvas.width - 10, // pas responsive il s'agit de largeur (10px)
        y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive correspond au paddle
        //form
        width : 10, // pas responsive
        height : 100, // pas responsive
        color : "GREY",
        score : 0
    }
    // Part 3 the ball
    const ball =  {
        //position
        x : canvas.width/2,
        y : canvas.height/2, // for be at the center
        //form
        radius : 10, // pas responsive
        color : "RED",
        //deplacement

    }
    //part 4 show 

    const line = {
        //pos
        x : canvas.width / 2 - 1, 
        y : 0,
        //form
        width : 2, 
        height : 10,
        color : "WHITE"
    }

    function show(){ // create a new map the order is important
    // const part
        drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
        drawMiddleLine(line);
        drawScore(canvas.width/4, canvas.height/5, host.score, "WHITE");
        drawScore(3 * canvas.width/4, canvas.height/5, guest.score, "WHITE");
        // move part
        drawRect(host.x, host.y, host.width, host.height, host.color);
        drawRect(guest.x, guest.y, guest.width, guest.height, guest.color);
        drawBall(ball.x, ball.y, ball.radius, ball.color);
    }

    function pauseGame(event) {
        setTimeout(() => {pause_guest = true}, 3000);
    }
    function movePaddle(event){ // function to permite to change the direction of the users paddle with the mouse
        if (pause_guest != false)
            pause_guest = false;
        guest.y = event.clientY - canvas.getBoundingClientRect().top - guest.height/2; // pour tester a brancher avec backbone et actioncable     
    }

    function ft_timer(val)
    {
        drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
        context.fillStyle = "WHITE";
        context.font = '48px serif';
        context.beginPath();
        context.fillText(val, canvas.width / 2 * 0.95 , canvas.height / 2);
        context.closePath();
    }

    function playing(host_id)
    {
        ft_recieve()
        if (timer <= 0)
        {
            ft_send(host_id);
            show();
        }
        else
            ft_timer(timer);
        if (host.score == 11 || guest.score == 11)
        {
            if (guest.score == 11)
                alert("Congratulation you win !!!");
            else
                alert("You loose this games but not the ware !!!");
            clearInterval(stop);
        }
        
    }

    function ft_recieve()
    {
        socket.onmessage = function(event) {            
        const response = event.data;
        const msg = JSON.parse(response);  
            if (msg.type == "ping" || !msg.message )// check if the pong_id is send to the correct personne
                return ;        
            if (msg.message.data.hosty)
                host.y = msg.message.data.hosty;
            if (msg.message.data.bally)
                ball.y = msg.message.data.bally;
            if (msg.message.data.ballx)
                ball.x = msg.message.data.ballx;
            if (msg.message.data.score_host)
                host.score = msg.message.data.score_host;  
            if (msg.message.data.score_guest)
                guest.score = msg.message.data.score_guest;
            if (msg.message.data.timer)
                timer = msg.message.data.timer - 1; 
            }
    };

    function ft_send(host_id)
    {
        socket.send(JSON.stringify({
            command: "message",
            identifier: JSON.stringify({
            channel: "PongChannel",
            pong_id: host_id // ici il marche pas 
            }),
            data: JSON.stringify({
                data: {guesty: guest.y, pause_guest: pause_guest}
            })
        }));
    }

   var stop = setInterval(playing, 1000/50, host_id);
}

//main

var socket = new WebSocket("ws://localhost:3000/cable");
socket.onopen = function()
{         
    var AskForGame = Backbone.Model.extend({
        urlRoot: '/ask_for_games'
    })
    var ask_for_game = new AskForGame();
    ask_for_game.fetch({data: {to_user_id: current_user_id, status: "playing"}, success: function() {
        var host_id = ask_for_game.get('from_user_id');
        socket.send(JSON.stringify({
            command: "subscribe",
            identifier: JSON.stringify({
                channel: "PongChannel",
                pong_id: host_id
            })
        }));
       playing(host_id);
    }});
}


</script>
</script> 