<script type = "text/template" id = "pongHost-template">
<%= stylesheet_link_tag "style-live-play.css" %>

    <div id = "pong-id" data-pong-id= <%=current_user.id%>> </div>
    <canvas id="pong" width="800px" height="600px" > </canvas>

<script> 

var pong_id = <%== current_user.id%>

function playgame(host_id){

    //reveive element from body
    var limit_guest = 0;
    var limit_host = 0;
    var timer = 6; // second before launch the game
    var pause = 0;
    var pause_host = false;
    var pause_guest = false;
    const element = document.getElementById("pong-id");
    const canvas = document.getElementById("pong");
    const context = canvas.getContext("2d");
    const height = canvas.height;
    const width = canvas.width;
    canvas.addEventListener("mousemove", movePaddle);
    canvas.addEventListener("mouseleave", triggerPause);

    // part 1 functions draw
    // draw score
    function drawScore(x, y,score ,color){
        context.fillStyle = color;
        context.font = '48px serif';
        context.beginPath();
        context.fillText(score, x, y);
        context.closePath();
    }

//draw the line at the middle
    function drawMiddleLine(line){
        for(let i =  0; i <= canvas.height; i += height/20){  // pas responsive
            drawRect(line.x, line.y + i, line.width, line.height, line.color);
        }
    }

    // draw rect
    function drawRect(x,y,w,h,color){
        context.fillStyle = color;
        context.beginPath();
        context.fillRect(x,y,w,h);
        context.closePath();
    }

    // draw ball
    function drawBall(x,y,r,color){
        context.fillStyle = color;
        context.beginPath(); //each call permite to clean the last arc
        context.arc(x,y,r,0, Math.PI*2, false);
        context.closePath();
        context.fill();
    }

    //part 2 users padlle
    //host
    const host = { 
        //position
        x : 0, 
        y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive
        //form 
        width : 5, // pas responsive
        height : height/5, // pas responsive
        color : "GREY",
        score : 0
        }
    //User2
    const guest = {
        //position
        x : canvas.width - 10, // pas responsive il s'agit de largeur (10px)
        y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive correspond au paddle
        //form
        width : 5, // pas responsive
        height : height/5, // pas responsive
        color : "GREY",
        score : 0
    }
    // Part 3 the ball
    const ball =  {
        //position
        x : canvas.width/2,
        y : canvas.height/2, // for be at the center
        //form
        radius : 10, // pas responsive
        color : "RED",
        //deplacement
        velocityX : 5,
        velocityY : 5,
        speed : 3 // a voir si pas assez rapide ou trop

    }
    //part 4 show 

    const line = {
        //pos
        x : canvas.width / 2 - 1, 
        y : 0,
        //form
        width : 2, 
        height : 10,
        color : "WHITE"
    }

    function show(){ // create a new map the order is important
    // const part
    drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
    drawMiddleLine(line);
    drawScore(canvas.width/4, canvas.height/5, host.score, "WHITE");
    drawScore(3 * canvas.width/4, canvas.height/5, guest.score, "WHITE");
    // move part
    drawRect(host.x, host.y, host.width, host.height, host.color);
    drawRect(guest.x, guest.y, guest.width, guest.height, guest.color);
    drawBall(ball.x, ball.y, ball.radius, ball.color);
    }

    // part 5 collision and rules
    //collision
    function get_collision(ba, paddle) // paddle of the player
    {

        paddle_top = paddle.y; // this is for know the limit of each point of the paddle
        paddle_bottom = paddle.height + paddle.y;
        paddle_left = paddle.x;
        paddle_right = paddle.x + paddle.width;
        
        ball_top = ba.y - ba.radius; // this is for know the limite of each point of the ball
        ball_bottom = ba.y + ba.radius;
        ball_left = ba.x - ba.radius;
        ball_right = ba.x + ba.radius;
        
        // if are true there is get_collision else if one is false no get_collision
        return ball_right > paddle_left && ball_bottom > paddle_top && ball_left < paddle_right && ball_top < paddle_bottom;
    }

    //restart when it's finished
    // penser a faire une fonction qui demander d'entrer pour demander si les joueurs sont pret et ensuite timer the game

    function restartBall(i, y)
    {   
        ball.y =  canvas.height/2, // for be at the center
        ball.x = canvas.width/2,
        ball.speed = 1, // check if it's to or less speed
        ball.velocityX = i * 5,
        ball.velocityY = y *5,
        ball.color = "RED"
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }

    function isFinish(host_id)
    {
        if (ball.x - ball.radius < 0) // if the ball is to the left
        {
            guest.score++;
            let i  = 1; // permite to timer the ball at the winner 
            let y = (getRandomInt(3)%2) ? 1 : -1; // permite to change the y direction of the ball
            restartBall(i, y);
        }
        if (ball.x + ball.radius > canvas.width) // if the ball is to the right
        {    host.score++;
            let i = -1;
            let y = (getRandomInt(3)%2) ? -1 : 1; 
            restartBall(i, y);
        }
        ft_send_score(host_id);
    }

    function sync(host_id) // sync the ball deplacement
    {
        ball.x += ball.velocityX;
        ball.y += ball.velocityY;

        if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height){ // collision to the top and the bottom
            ball.velocityY =  -ball.velocityY;  
        }
        let player = (ball.x < canvas.width/2) ? host : guest; // determine if the ball is on the right or the left
        if (get_collision(ball, player) == true)
        {
            let direction = (player == host) ? 1 : -1; // set if the ball should go to the right or left

            let col = ball.y - (player.y + player.height/2); // set the colision point
            col = col/(player.height/2); // normalize the colision point 
            
            let angleRad = col * Math.PI/4; // determine the angle to return 

            ball.velocityY = direction * ball.speed * Math.sin(angleRad); // calculate the y deplacement + speed 
            ball.velocityX = direction * ball.speed * Math.cos(angleRad); // calculate the x deplacement + speed

            ball.speed += 1; // increase the speed at each contact with the paddle
        }
        isFinish(host_id);
    }

    function movePaddle(event){ // function to permite to change the direction of the users paddle with the mouse
        if (pause_host != false)
        {
            limit_host = 0;
            pause  = 0;
            pause_host = false;
        }
        host.y = event.clientY - canvas.getBoundingClientRect().top - host.height/2;

    }


    function ft_timer(val)
    {
        drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
        context.fillStyle = "WHITE";
        context.font = '48px serif';
        context.beginPath();
        context.fillText(val, canvas.width / 2 * 0.90 , canvas.height / 2);
        context.closePath();
    }

    function triggerPause(event) {
        pause = 1;
    }

    function ft_pause(){
        if (pause != 0)
            pause++;
        if (pause == 100)
            pause_host = true;
    }
    function limitPause(host_id)
    {
        if (pause_host == true)
        {
            limit_host++;
            console.log("limit_host = " + limit_host);
            if (limit_host == 700)
            {
                guest.score = 11;
                ft_send_score(host_id);
            }
        }
        if (pause_guest == true)
        {
            limit_guest++;
            console.log("limit_guest = " + limit_guest);
            if (limit_guest == 700)
            {
                host.score = 11;
                ft_send_score(host_id);
            }
        }
        

    }

    function endText(txt)
    {
        context.fillStyle = "GREY";
        context.font = '48px serif';
        context.beginPath();
        context.fillText(txt, canvas.width/2 * 0.7, canvas.height / 2);
        context.closePath();
    }

    function playing(host_id)
    {
        ft_pause();
        limitPause(host_id)
        if (timer <= -1 && pause_host == false && pause_guest == false )
        {
            sync(host_id);
            ft_send(host_id);
            show();
        }
        if (host.score == 11 || guest.score == 11)
        {
            if (host.score == 11)
                endText("You win !!!");
            else
                endText("You loose ...");
            archive_askForGame_table()
            clearInterval(stop);
        }

        //console.log("pong x = " + ball.x); // regarder quand le joueur est sur une autre view
    }

    function ft_send_timer()
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id

                }),
                data: JSON.stringify({
                    data: {timer: timer}
                })
            }));
    }

    function ft_send(host_id)
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id

                }),
                data: JSON.stringify({
                    data: {hosty: host.y, bally: ball.y, ballx: ball.x}
                })
            }));
    }

    function ft_send_score(host_id)
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id
                }),
                data: JSON.stringify({
                    data: {score_host: host.score, score_guest: guest.score}
                })
            }));
    }


    // receive  guest 
    socket.onmessage = function(event) {            
    const response = event.data;
    const msg = JSON.parse(response);
    if (msg.type == "ping" || !msg.message)// don't check the ping message
            return ;
        // selecte only y pos of guest
        if (msg.message.data.guesty)
            guest.y = msg.message.data.guesty;
        if (msg.message.data.pause_guest == false || msg.message.data.pause_guest == true)
        {
            if (pause_guest = true && msg.message.data.pause_guest == false)
                limit_guest = 0;
            pause_guest = msg.message.data.pause_guest;
        }
      
    };

    //timer game think about press key to start or something like this of the two user
    
    function countdown()
    {
        ret = setInterval(function() {
            if (timer >= 0)
            {
                ft_send_timer();
                if (timer <= 1)
                    ft_timer("GO !");
                else
                    ft_timer(timer - 1);
                timer--;
            }
            else
            {
                ft_send_timer();
                timer = -1;
                clearInterval(ret);
            }
        }, 1200);
    }
    
    // part where start the game
    countdown();
    var stop = setInterval(playing, 1000/50, host_id); 
}


var socket = new WebSocket("ws://localhost:3000/cable");
socket.onopen = function()
{    
    console.log("subscribed = " + pong_id);
    socket.send(JSON.stringify({
            command: "subscribe",
            identifier: JSON.stringify({
                channel: "PongChannel",
                pong_id:  pong_id
            })
        }));
    playgame(current_user_id);
}


function archive_askForGame_table()
{
    var AskForGame = Backbone.Model.extend({
        urlRoot: '/ask_for_games'
    })
    var ask_for_game = new AskForGame();
    ask_for_game.fetch({data: {to_user_id: current_user_id, status: "playing"}, success: function() {
        ask_for_game.set({status: "ending"});
        ask_for_game.save();
        }
    });
}

</script>
</script>
