<script type = "text/template" id = "pongHost-template">
<%= stylesheet_link_tag "style-live-play.css" %>


<script> 

    var pong_id = <%== current_user.id%> // anti jaune >

    function playgame(host_id){
        var time_pause = 10; // pause before excit game
        var limit_guest = 0;
        var timer = 6; // second before launch the game
        var speed_ball = 4;
        var pause_guest = false;
        var own_score = 0;
        
       
        

//-------------------------------part 1 functions draw--------------------------------------//
    // part 1 functions draw
    // draw score
    function drawScore(x, y,score ,color){
        context.fillStyle = color;
        context.font = '48px serif';
        context.beginPath();
        context.fillText(score, x, y);
        context.closePath();
    }

    //draw the line at the middle
    function drawMiddleLine(line){
        for(let i =  0; i <= canvas.height; i += canvas.height/20){  // pas responsive
            drawRect(line.x, line.y + i, line.width, line.height, line.color);
        }
    }

    // draw rect
    function drawRect(x,y,w,h,color){
        context.fillStyle = color;
        context.beginPath();
        context.fillRect(x,y,w,h);
        context.closePath();
    }

    // draw ball
    function drawBall(x,y,r,color){
        context.fillStyle = color;
        context.beginPath(); //each call permite to clean the last arc
        context.arc(x,y,r,0, Math.PI*2, false);
        context.closePath();
        context.fill();
    }

//-------------------------------part 2 object guest host padlle and ball--------------------------------------//

    //guest
    const guest = {
        //position
        x : canvas.width - 10, // pas responsive il s'agit de largeur (10px) '
        y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive correspond au paddle
        
        //form
        width : 10, // pas responsive
        height : canvas.height/5, // pas responsive
        color : "GREY",
        score : 0
    }
    //ball
    const ball =  {
        //position
        x : canvas.width/2,
        y : canvas.height/2, // for be at the center
        //form
        radius : 10, // pas responsive
        color : "RED",
        //deplacement
        velocityX : speed_ball,
        velocityY : speed_ball,
        speed : 5 // a voir si pas assez rapide ou trop

    }
    //line
    const line = {
        //pos
        x : canvas.width / 2 - 1, 
        y : 0,
        //form
        width : 2, 
        height : 10,
        color : "WHITE"
    }
//-------------------------------part 3 draw in canvas--------------------------------------//

    function show()
    { // create a new map the order is important
        // const part
        drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
        drawMiddleLine(line);
        drawScore(canvas.width/4, canvas.height/5, own_score, "WHITE");
        drawScore(3 * canvas.width/4, canvas.height/5, guest.score, "WHITE");
        // move part
        drawRect(gamer.x, gamer.y, gamer.width, gamer.height, gamer.color);
        drawRect(guest.x, guest.y, guest.width, guest.height, guest.color);
        if (pause < frame * 2 - 4)
            drawBall(ball.x, ball.y, ball.radius, ball.color);
        else
        {
            drawRect(0,0, canvas.width, canvas.height,"BLACK");
            endText("    pause");
        }
    }

    function ft_timer(val) // make countdown
    {
        drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
        context.fillStyle = "WHITE";
        context.font = '48px serif';
        context.beginPath();
        context.fillText(val, canvas.width / 2 * 0.90 , canvas.height / 2);
        context.closePath();
    }

    function endText(txt)
    {
        context.fillStyle = "GREY";
        context.font = '48px serif';
        context.beginPath();
        context.fillText(txt, canvas.width/2 * 0.7, canvas.height / 2);
        context.closePath();
    }
//-------------------------------part 4 pause function --------------------------------------//
    // function triggerMouseOut(event) {
    //     pause = 1;
    // }

    function ft_pause(){
        if (pause != 0)
            pause++;
        if (pause == frame * 2)
            pause_gamer = true;
    }

    function limitPause(host_id)
    {
        if (pause_gamer == true)
        {
            limit_gamer++;
            if (limit_gamer == frame * time_pause)
            {
                guest.score = 11;
                ft_send_score(host_id);
            }
        }
        if (pause_guest == true)
        {
            limit_guest++;
            if (limit_guest == frame * time_pause)
            {
                own_score = 11;
                ft_send_score(host_id);
            }
        }
    }


//-------------------------------part 5 function paddle --------------------------------------//



//-------------------------------part 6  socket send and reveive --------------------------------------//
    function ft_send_timer()
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id,
                    user_id: <%== current_user.id %>
                }),
                data: JSON.stringify({
                    data: {timer: timer}
                })
            }));
    }

    function ft_send(host_id)
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id,
                    user_id: <%== current_user.id %>

                }),
                data: JSON.stringify({
                    data: {hosty: gamer.y, bally: ball.y, ballx: ball.x}
                })
            }));
    }

    function ft_send_score(host_id)
    {
        socket.send(JSON.stringify({
                command: "message",
                identifier: JSON.stringify({
                    channel: "PongChannel",
                    pong_id: host_id,
                    user_id: <%== current_user.id %>
                }),
                data: JSON.stringify({
                    data: {score_host: own_score, score_guest: guest.score}
                })
            }));
    }

 
        socket.onmessage = function(event) {            
        const response = event.data;
        const msg = JSON.parse(response);
        if (msg.type == "ping" || !msg.message)// don't check the ping message
                return ;
            // selecte only y pos of guest
            if (msg.message.data == "stop")
                own_score = 11;
            if (msg.message.data.guesty)
                guest.y = msg.message.data.guesty;
            if (msg.message.data.pause_guest == false || msg.message.data.pause_guest == true)
            {
                if (pause_guest = true && msg.message.data.pause_guest == false)
                    limit_guest = 0;
                pause_guest = msg.message.data.pause_guest;
            }
        };
    
//-------------------------------part 7 physic on ball --------------------------------------//
    function get_collision(ba, paddle)
    {
        var paddle_top = paddle.y; // this is for know the limit of each point of the paddle
        var paddle_bottom = paddle.height + paddle.y;
        var paddle_left = paddle.x - ball.speed;
        var paddle_right = paddle.x + paddle.width + ball.speed;
        
        
        var ball_top = ba.y - ba.radius; // this is for know the limite of each point of the ball
        var ball_bottom = ba.y + ba.radius;
        var ball_left = ba.x - ba.radius;
        var ball_right = ba.x + ba.radius;
            
        // if are true there is get_collision else if one is false no get_collision
        return ball_right > paddle_left && ball_bottom > paddle_top && ball_left < paddle_right && ball_top < paddle_bottom;
    }

    function sync(host_id) // sync the ball deplacement
    {
        if (ball.x + ball.velocityX <= guest.x + guest.width + ball.speed || ball.x + ball.velocityX >= gamer.x - gamer.width - ball.speed)
            ball.x += ball.velocityX;
        else
            ball.x = (ball.x < canvas.width/2) ? gamer.x : guest.x;
        ball.y += ball.velocityY;

        if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height){ // collision to the top and the bottom
            ball.velocityY =  -ball.velocityY;  
        }
        let player = (ball.x < canvas.width/2) ? gamer : guest; // determine if the ball is on the right or the left

        if (get_collision(ball, player) == true)
        {
            let direction = (player == gamer) ? 1 : -1; // set if the ball should go to the right or left

            let col = ball.y - (player.y + player.height/2); // set the colision point
            col = col/(player.height/2); // normalize the colision point 
            
            let angleRad = col * Math.PI/4; // determine the angle to return 

            ball.velocityY = direction * ball.speed * Math.sin(angleRad); // calculate the y deplacement + speed 
            ball.velocityX = direction * ball.speed * Math.cos(angleRad); // calculate the x deplacement + speed

            if (ball.speed < 40)
                ball.speed += 1; // increase the speed at each contact with the paddle
        }
        isFinish(host_id);
    }
//-------------------------------part 8 goal and restart  --------------------------------------//
    
    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    } 
    function restartBall(i, y)
    {   
        ball.y =  canvas.height/2, // for be at the center
        ball.x = canvas.width/2,
        ball.speed = 1, // check if it's to or less speed
        ball.velocityX = i * speed_ball,
        ball.velocityY = y * speed_ball,
        ball.color = "RED"
    }
    function isFinish(host_id) // GOAl
    {
        if (ball.x - ball.radius < 0) // if the ball is to the left
        {
            guest.score++;
            let i  = 1; // permite to timer the ball at the winner 
            let y = (getRandomInt(3)%2) ? 1 : -1; // permite to change the y direction of the ball
            restartBall(i, y);
        }
        if (ball.x + ball.radius > canvas.width) // if the ball is to the right
        {
            own_score++;
            let i = -1;
            let y = (getRandomInt(3)%2) ? -1 : 1; 
            restartBall(i, y);
        }
        ft_send_score(host_id);
    }
  

//-------------------------------part 9 Countdowno before launch  --------------------------------------//

    function countdown()
    {
        ret = setInterval(function() 
        {   
            if (timer >= 0 && own_score == 0)
            {
                if (timer <= 1)
                    ft_timer("GO !");
                else
                    ft_timer(timer - 1);
                timer--;
                ft_send_timer();    
            }
            else
            {
               setTimeout(clearInterval(ret),200);
            }
        }, 1000);
    }
//-------------------------------part 10 save state in database--------------------------------------//

        function archive_askForGame_table(host_score, guest_score)
        {
            var AskForGame = Backbone.Model.extend({
                urlRoot: '/ask_for_games'
            })
            var ask_for_game = new AskForGame();
            ask_for_game.fetch({data: {from_user_id: current_user_id, status: "playing"}, success: function(data) {
                if (ask_for_game.get("status") == "playing")
                    {
                        if (host_score == 11)
                            saveScore(ask_for_game.get("game_id"), ask_for_game.get("from_user_id"),host_score, guest_score)
                         else
                            saveScore(ask_for_game.get("game_id"), ask_for_game.get("to_user_id"),host_score, guest_score);
                        ask_for_game.save({status: "ending"});
                    }
                }
            });
        }

        function saveScore(game_id, winner_id, host_score, guest_score) // saving in games pas fait encore depend de comment est géré
        {
            var Game = Backbone.Model.extend({
                urlRoot: '/games'
            })
            var game = new Game({id: game_id});
            game.fetch({success: function(data) {
                game.set({winner_id: winner_id, from_user_score: host_score, to_user_score: guest_score, forfeit: false});
                game.save();
                }
            });
        }


//-------------------------------part 11 playing game center--------------------------------------//

    function playing(host_id)
    {
        //ft_pause();
        limitPause(host_id) // a remettre plus tard quand le site sera fini
        gamer.x = 0;
        if (timer <= -1 && pause_gamer == false && pause_guest == false )
        {
            sync(host_id);
            ft_send(host_id);
            show();
        }
        if (own_score == 11 || guest.score == 11)
        {
            drawRect(0,0, canvas.width, canvas.height,"BLACK");
            if (own_score == 11)
                endText("You win !!!");
            else
                endText("You loose ...");
            archive_askForGame_table(own_score, guest.score);
            socket.close();
            clearInterval(stop);
            setTimeout(() => {playview.render();}, 2000);
        }
    }
    countdown();
    var stop = setInterval(playing, 1000/frame, host_id); 
}



//-------------------------------MAIN--------------------------------------//

var socket = new WebSocket("ws://localhost:3000/cable");
gamer.x = 0;
window.onbeforeunload = function() {
    clearInterval(stop);
    socket.onclose = function () {socket.close();
    canvas.close();
    console.log("socket pongchannel close")}; // disable onclose handler first
};
socket.onopen = function()
{    
    socket.send(JSON.stringify({
            command: "subscribe",
            identifier: JSON.stringify({
                channel: "PongChannel",
                pong_id:  pong_id,
                user_id: <%== current_user.id %>
            })
        }));
    playgame(current_user_id);
}

</script>
</script>
