<script type = "text/template" id = "pongWatch-template">
    <%= stylesheet_link_tag "style-live-play.css" %>
    
    <div id = "pong-id" data-pong-id= <%=current_user.id%>> </div>
    <canvas id="pong" width="800px" height="600px" > </canvas>
    
    <script>      
    function lets() {
        var current = <%== current_user.id%>
        var frame = 25;
        var time_pause = 10
        function play(host_id)
        {
            const canvas = document.getElementById("pong");
            const height = canvas.height;
            const width = canvas.width;
            const context = canvas.getContext("2d");
            const element = document.getElementById("pong-id");
            var pong_id = element.getAttribute("data-pong-id");
            canvas.style.cursor = "none";
            var pause_guest = false;
            var timer = 5;
            var pause  = 0;
         
    //-------------------------------part 1 functions draw--------------------------------------//
            // draw score
            function drawScore(x, y,score ,color){
                context.fillStyle = color;
                context.font = '48px serif';
                context.beginPath();
                context.fillText(score, x, y);
                context.closePath();
            }
    
            //draw the line at the middle
            function drawMiddleLine(line){
                for(let i =  0; i <= canvas.height; i += height/20){  // pas responsive
                    drawRect(line.x, line.y + i, line.width, line.height, line.color);
                }
            }
            // draw rect
            function drawRect(x,y,w,h,color){
                context.fillStyle = color;
                context.beginPath();
                context.fillRect(x,y,w,h);
                context.closePath();
            }
    
            // draw ball
            function drawBall(x,y,r,color){
                context.fillStyle = color;
                context.beginPath(); //each call permite to clean the last arc
                context.arc(x,y,r,0, Math.PI*2, false);
                context.closePath();
                context.fill();
            }
    //-------------------------------part 2 object guest host padlle and ball--------------------------------------//
            //host
            const host = { 
                //position
                x : 0, 
                y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive
                //form 
                width : 10, // pas responsive
                height : height/5, // pas responsive
                color : "GREY",
                score : 0
                }
            //guest
            const guest = {
                //position
                x : canvas.width - 10, // pas responsive il s'agit de largeur (10px)
                y : canvas.height/2 - 100 / 2, // le 100 / 2 pas responsive correspond au paddle
                //form
                width : 10, // pas responsive
                height : height/5, // pas responsive
                color : "GREY",
                score : 0
            }
            //ball
            const ball =  {
                //position
                x : canvas.width/2,
                y : canvas.height/2, // for be at the center
                //form
                radius : 10, // pas responsive
                color : "RED",
                //deplacement
            }
            //line
            const line = {
                //pos
                x : canvas.width / 2 - 1, 
                y : 0,
                //form
                width : 2, 
                height : 10,
                color : "WHITE"
            }
    
    //-------------------------------part 3 draw in canvas--------------------------------------//
    
            function show(){ // create a new map the order is important
            // const part
                drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
                drawMiddleLine(line);
                drawScore(canvas.width/4, canvas.height/5, host.score, "WHITE");
                drawScore(3 * canvas.width/4, canvas.height/5, guest.score, "WHITE");
                // move part
                drawRect(host.x, host.y, host.width, host.height, host.color);
                drawRect(guest.x, guest.y, guest.width, guest.height, guest.color);
                drawBall(ball.x, ball.y, ball.radius, ball.color);
            }
            
            function ft_timer(val) // make a countdown
            {
                drawRect(0,0, canvas.width, canvas.height,"BLACK"); // the game place
                context.fillStyle = "WHITE";
                context.font = '48px serif';
                context.beginPath();
                context.fillText(val, canvas.width / 2 * 0.95 , canvas.height / 2);
                context.closePath();
            }
    
            function endText(txt) // said who win and loose
            {
                context.fillStyle = "GREY";
                context.font = '48px serif';
                context.beginPath();
                context.fillText(txt, canvas.width/2 * 0.7, canvas.height / 2);
                context.closePath();
            }
    
    //-------------------------------part 4 pause function --------------------------------------//

    
    //-------------------------------part 5 function paddle --------------------------------------//

    
    //-------------------------------part 6  sock receive and send --------------------------------------//
    
            function ft_recieve() 
            {   
                sock.onmessage = function(event) 
                {            
                const response = event.data;
                const msg = JSON.parse(response); 
                    if (msg.type == "ping" || !msg.message )
                        return ;
                    if (msg.message.data == "stop")
                        host.score = -1;
                    if (msg.message.data.timer == 0 || msg.message.data.timer)
                        timer = msg.message.data.timer;
                    if (msg.message.data.hosty)
                        host.y = msg.message.data.hosty;
                    if (msg.message.data.bally)
                        ball.y = msg.message.data.bally;
                    if (msg.message.data.ballx)
                        ball.x = msg.message.data.ballx;
                    if (msg.message.data.score_host)
                        host.score = msg.message.data.score_host;  
                    if (msg.message.data.score_guest)
                        guest.score = msg.message.data.score_guest;
                    if (msg.message.data.guesty)
                        guest.y = msg.message.data.guesty;
                    if (msg.message.data.pause_guest == false || msg.message.data.pause_guest == true)
                    {
                        if (pause_guest = true && msg.message.data.pause_guest == false)
                            limit_guest = 0;
                        pause_guest = msg.message.data.pause_guest;
                    }
                }
            }
    
    //-------------------------------part 7 play on guest view --------------------------------------//
    
            function playing(host_id)
            {
                ft_recieve()
                show();
                if (host.score == -1 || closescript == true)
                {
                    console.log("je sors par la")
                    endText("player disco..")
                    sock.close();
                    clearInterval(stop);
                    // liveview.render();
                }
                if (host.score >= 11 || guest.score >= 11)
                {
                    clearInterval(stop);
                    if (guest.score >= 11)
                        endText("Guest win !!!");
                    else
                        endText("Host loose ... ");
                    sock.close();
                    // setTimeout(() => {liveview.render();}, 1000);
                } 
            }
        ft_recieve();
        var stop = setInterval(playing, 1000/frame, host_id);
        }
    
    //-------------------------------MAIN --------------------------------------//

        window.onbeforeunload = function() {
            sock.onclose = function () {}; // disable onclose handler first
            closescript = true;
            clearInterval(stop);
            sock.close();
        };       
        closescript = false;
        sock = new WebSocket('<%= ENV["action_cable_url"] %>');
        sock.onopen = function()
        {   
            console.log(sock);
            var Watch = Backbone.Model.extend({
                urlRoot: '/watches'
            })
            var watch = new Watch();
            function get_channel()
        {
            var host_id = watch.get('hostId');
                sock.send(JSON.stringify({
                    command: "subscribe",
                    identifier: JSON.stringify({
                        channel: "PongChannel",
                        pong_id: host_id,
                        user_id: <%== current_user.id %>
                    })
                }));
            play(host_id);
        }
            watch.fetch({data: {user_id: current}, success: get_channel});
    
        }
    }

    lets();
    
    </script>
    </script> 