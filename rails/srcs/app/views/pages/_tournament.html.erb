<script type="text/template" id="tournament-template">
<%= stylesheet_link_tag "style-tournament.css" %>
<body>
<div class="space">
</div>
<div class="body-tournament">
<div id="admin_create_button"></div>
<div class="title" style="margin-top: 30px;">
    <h1>Tournaments</h1>
</div>
<div class="container-tableau2">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Incentive</th>
                <th scope="col">Time left to register</th>
                <th scope="col">Start Time</th>
                <th scope="col">Number of Players</th>
                <th scope="col">Register</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
    </table>
</div>
<div class="container-tableau1">
    <table class="table">
        <tbody id="tournaments_show_body">
        </tbody>
    </table>
</div>
</div>
</body>
<script>
    var Tournament = Backbone.Model.extend({
        urlRoot: '/tournaments'
    });
    var tournament = new Tournament();
    tournament.fetch({
        success: function(data1){
            data1 = data1.toJSON();
            var tournaments_table_show = $("#tournaments_show_body");
            var TournamentParticipation = Backbone.Model.extend({
                urlRoot: '/tournament_participations'
            });
            var tournament_participation = new TournamentParticipation();
            tournament_participation.fetch({
                data: {user_id: <%== current_user.id %>, type: "all_in"},
                success: function(data2){
                    data2 = data2.toJSON();
                    var all_tournament_nb_player = data2["tournament_nb_player_ordered"];
                    console.log(all_tournament_nb_player);
                    data2 = data2["user_tournament_participations"];
                    console.log(data2);
                    var size = Object.keys(data1).length;
                    var i = 0;
                    tournaments_table_show.empty();
                    while (i < size)
                    {
                        var start_time = new Date(data1[i].deadline);
                        var limit_to_register_time = new Date(start_time - 0.5 * 60000);
                        tournaments_table_show.append("<tr>" +
                            "<td>" + data1[i].rules + "</td>" +
                            "<td>" + data1[i].incentives +  "</td>"+
                            "<td>" + limit_to_register_time + "</div>" +
                            "<td>" + start_time + "</td>" +
                            "<td>" + all_tournament_nb_player[data1[i].id] + ((Date.now() > limit_to_register_time) ? "" : ("/" + data1[i].max_nb_player)) + "</td>" +
                            "<td>" + (data2[data1[i].id] ? "<button onclick='ft_unregister_tournament(" + data2[data1[i].id].id + ")'>unregister</button>" : "<button onclick='ft_register_tournament(" + data1[i].id + ")'>register</button>") + "</td>" +
                            "<td>" + ((data1[i].status == 'created' || !data1[i].status) ? ("<p>" + data1[i].status + "</p>") : ("<button onclick='ft_see_tournament(" + data1[i].id + ")'>" + data1[i].status + "</button>"))+ "</td>" +
                            "</tr>");
                        i++;
                    }
                }
            });
        }
    })
    <% if(current_user.is_owner || current_user.is_admin) %>
        var admin_button_div = $("#admin_create_button");
        admin_button_div.append("<div style='display: flex; justify-content: space-between; margin: auto; width: 83%; align-items: center; padding: 10px; border: 4px solid #333333; background: #333333; color: white; font-weight: bold;'>" +
                "<div style='display: flex; flex-direction: column; width: 20%;'><label>Name</label><input id='tournament_name' type='text' required placeholder='Enter a tournament name'></div>" +
                "<div style='display: flex; flex-direction: column;' class='time_picker'><label for='start_time'>Start Time</label><input placeholder='Date' id='start_time' required></div>" +
                "<div style='display: flex; flex-direction: column;'><label for='nb_of_players_selected'>Number of Players</label><select id='nb_of_players_selected'><option>2</option><option>4</option><option>8</option></select></div>" +
                "<div style='display: flex; flex-direction: column; width: 20%;'><label>Incentives</label><input id='incentives_id' type='text' placeholder='Give some incentives'></div>" +
                "<div><button class='btn btn-secondary' onclick='ft_create_tournament()'>Create Tournament</button></div>" +
            "</div>");
            flatpickr("#start_time", {
                enableTime: true,
                time_24hr: true,
                dateFormat: "Y-m-d H:i",
                minDate: "today"
            });
    <% end %>
    function ft_create_tournament(){//need to add validation models in rails
        var name = $("#tournament_name").val();
        var start_time = $("#start_time").val();
        var nb_of_players = $("#nb_of_players_selected").val();
        var incentives = $("#incentives_id").val();
        var game_type = "single_round";
        if (name.length == 0)
        {
            Swal.fire({
                icon: "error",
                title: "Ooopsss",
                text: "Name cannot be empty !"
            });
            return;
        }
        if (start_time.length == 0)
        {
            Swal.fire({
                icon: "error",
                title: "Ooopsss",
                text: "Start Time cannot be empty !"
            });
            return;
        }
        console.log(start_time);
        console.log(new Date(start_time));
        console.log(Date.now());
        var date = new Date(start_time);
        console.log(date);
        console.log((Date.now() > date));
        if (Date.now() > new Date(start_time))
        {
            Swal.fire({
                icon: "error",
                title: "Ooopsss",
                text: "Start Time passed !"
            });
            return;
        }
        var Tournament = Backbone.Model.extend({
            urlRoot: '/tournaments'
        });
        var tournament = new Tournament();
        //tournament.save(
        var data =
        {
            rules: name,
            deadline: start_time,
            max_nb_player: nb_of_players * 1,
            type: game_type,
        };
        if (incentives.length > 0)
            data["incentives"] = incentives;
        tournament.save(data,
        {
            success: function(){
                Swal.fire({
                    icon: "success",
                    title: "Great !",
                    showConfirmButton: false,
                    timer: 2000,
                    text: "tournament created !"
                });
                tournamentview.render();
            },
            error: function(data, xhr){
                console.log("eee");
                console.log(xhr);
                Swal.fire({
                    icon: 'error',
                    title: 'Ooops...',
                    text: xhr.responseJSON && xhr.responseJSON["error_text"] ? xhr.responseJSON["error_text"] : xhr.responseText,
                    footer: xhr.statusText
                });
            }
        });
    }
    function ft_register_tournament(tournament_id)
    {
        var TournamentParticipation = Backbone.Model.extend({
            urlRoot: '/tournament_participations'
        });
        var tournament_participation = new TournamentParticipation({
            user_id: <%== current_user.id %>,
            tournament_id: tournament_id
        });
        tournament_participation.save({}, {
            success: function(){
                Swal.fire({
                    icon: "success",
                    title: "Great !",
                    showConfirmButton: false,
                    timer: 2000,
                    text: "you registered in a tournament !"
                });
                tournamentview.render();
            },
            error: function(data, xhr){
                console.log(xhr);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: xhr.responseJSON && xhr.responseJSON["error_text"] ? xhr.responseJSON["error_text"] : "",
                    footer: xhr.statusText
                });
                tournamentview.render();
            }
        });
    }
    function ft_unregister_tournament(tournament_participation_id)
    {
        var TournamentParticipation = Backbone.Model.extend({
            urlRoot: '/tournament_participations'
        });
        var tournament_participation = new TournamentParticipation({id: tournament_participation_id});
        tournament_participation.destroy({
            success: function(){
                Swal.fire({
                    icon: "success",
                    title: "OK !",
                    showConfirmButton: false,
                    timer: 2000,
                    text: "you unregistered from tournament !"
                });
                tournamentview.render();
            },
            error: function(data, xhr){
                console.log("error");
                Swal.fire({
                    icon: 'error',
                    title: 'Ooops...',
                    text: xhr.responseJSON && xhr.responseJSON["error_text"] ? xhr.responseJSON["error_text"] : "",
                    footer: xhr.statusText
                });
                tournamentview.render();
            }
        });
    }
    function ft_see_tournament(tournament_id)
    {
        console.log(tournament_id);
        tournamentview.render_details(tournament_id);
    }
</script>
</script>